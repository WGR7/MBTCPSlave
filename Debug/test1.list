
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e98  20000090  08004424  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20001f28  08004424  00021f28  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eb4f  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025f3  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ac8  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  00031cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c2e  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003dd1  00000000  00000000  00038286  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c057  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002bb8  00000000  00000000  0003c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08004334 	.word	0x08004334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08004334 	.word	0x08004334

08000150 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000158:	4a05      	ldr	r2, [pc, #20]	; (8000170 <NVIC_PriorityGroupConfig+0x20>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000164:	60d3      	str	r3, [r2, #12]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	e000ed00 	.word	0xe000ed00

08000174 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b04      	cmp	r3, #4
 8000180:	d106      	bne.n	8000190 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000182:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <SysTick_CLKSourceConfig+0x34>)
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <SysTick_CLKSourceConfig+0x34>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800018e:	e005      	b.n	800019c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <SysTick_CLKSourceConfig+0x34>)
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <SysTick_CLKSourceConfig+0x34>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f023 0304 	bic.w	r3, r3, #4
 800019a:	6013      	str	r3, [r2, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	e000e010 	.word	0xe000e010

080001ac <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80001b8:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <FLASH_SetLatency+0x34>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80001c4:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4313      	orrs	r3, r2
 80001cc:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80001ce:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <FLASH_SetLatency+0x34>)
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40022000 	.word	0x40022000

080001e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
 80001f6:	2300      	movs	r3, #0
 80001f8:	61bb      	str	r3, [r7, #24]
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	78db      	ldrb	r3, [r3, #3]
 800020a:	f003 030f 	and.w	r3, r3, #15
 800020e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	78db      	ldrb	r3, [r3, #3]
 8000214:	f003 0310 	and.w	r3, r3, #16
 8000218:	2b00      	cmp	r3, #0
 800021a:	d005      	beq.n	8000228 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	789b      	ldrb	r3, [r3, #2]
 8000220:	461a      	mov	r2, r3
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	4313      	orrs	r3, r2
 8000226:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	2b00      	cmp	r3, #0
 8000230:	d044      	beq.n	80002bc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
 800023c:	e038      	b.n	80002b0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800023e:	2201      	movs	r2, #1
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	fa02 f303 	lsl.w	r3, r2, r3
 8000246:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4013      	ands	r3, r2
 8000252:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	429a      	cmp	r2, r3
 800025a:	d126      	bne.n	80002aa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800025c:	69bb      	ldr	r3, [r7, #24]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000262:	220f      	movs	r2, #15
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	43db      	mvns	r3, r3
 8000270:	697a      	ldr	r2, [r7, #20]
 8000272:	4013      	ands	r3, r2
 8000274:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000276:	69fa      	ldr	r2, [r7, #28]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	fa02 f303 	lsl.w	r3, r2, r3
 800027e:	697a      	ldr	r2, [r7, #20]
 8000280:	4313      	orrs	r3, r2
 8000282:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	2b28      	cmp	r3, #40	; 0x28
 800028a:	d105      	bne.n	8000298 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800028c:	2201      	movs	r2, #1
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	409a      	lsls	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	615a      	str	r2, [r3, #20]
 8000296:	e008      	b.n	80002aa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	2b48      	cmp	r3, #72	; 0x48
 800029e:	d104      	bne.n	80002aa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002a0:	2201      	movs	r2, #1
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	409a      	lsls	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002aa:	69bb      	ldr	r3, [r7, #24]
 80002ac:	3301      	adds	r3, #1
 80002ae:	61bb      	str	r3, [r7, #24]
 80002b0:	69bb      	ldr	r3, [r7, #24]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9c3      	bls.n	800023e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	2bff      	cmp	r3, #255	; 0xff
 80002c2:	d946      	bls.n	8000352 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	61bb      	str	r3, [r7, #24]
 80002ce:	e03a      	b.n	8000346 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	3308      	adds	r3, #8
 80002d4:	2201      	movs	r2, #1
 80002d6:	fa02 f303 	lsl.w	r3, r2, r3
 80002da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	461a      	mov	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4013      	ands	r3, r2
 80002e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002e8:	693a      	ldr	r2, [r7, #16]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d127      	bne.n	8000340 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80002f0:	69bb      	ldr	r3, [r7, #24]
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80002f6:	220f      	movs	r2, #15
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	43db      	mvns	r3, r3
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	4013      	ands	r3, r2
 8000308:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800030a:	69fa      	ldr	r2, [r7, #28]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	697a      	ldr	r2, [r7, #20]
 8000314:	4313      	orrs	r3, r2
 8000316:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	78db      	ldrb	r3, [r3, #3]
 800031c:	2b28      	cmp	r3, #40	; 0x28
 800031e:	d105      	bne.n	800032c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	3308      	adds	r3, #8
 8000324:	2201      	movs	r2, #1
 8000326:	409a      	lsls	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	78db      	ldrb	r3, [r3, #3]
 8000330:	2b48      	cmp	r3, #72	; 0x48
 8000332:	d105      	bne.n	8000340 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	3308      	adds	r3, #8
 8000338:	2201      	movs	r2, #1
 800033a:	409a      	lsls	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	3301      	adds	r3, #1
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	69bb      	ldr	r3, [r7, #24]
 8000348:	2b07      	cmp	r3, #7
 800034a:	d9c1      	bls.n	80002d0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	605a      	str	r2, [r3, #4]
  }
}
 8000352:	bf00      	nop
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000368:	887a      	ldrh	r2, [r7, #2]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	611a      	str	r2, [r3, #16]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	615a      	str	r2, [r3, #20]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000398:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <RCC_DeInit+0x54>)
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <RCC_DeInit+0x54>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003a4:	4910      	ldr	r1, [pc, #64]	; (80003e8 <RCC_DeInit+0x54>)
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <RCC_DeInit+0x54>)
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <RCC_DeInit+0x58>)
 80003ac:	4013      	ands	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <RCC_DeInit+0x54>)
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <RCC_DeInit+0x54>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <RCC_DeInit+0x54>)
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <RCC_DeInit+0x54>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80003cc:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <RCC_DeInit+0x54>)
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <RCC_DeInit+0x54>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <RCC_DeInit+0x54>)
 80003da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003de:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	f8ff0000 	.word	0xf8ff0000

080003f0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <RCC_HSICmd+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	42420000 	.word	0x42420000

08000410 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <RCC_PLLConfig+0x38>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800042a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	4313      	orrs	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <RCC_PLLConfig+0x38>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <RCC_PLLCmd+0x1c>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	42420060 	.word	0x42420060

0800046c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <RCC_SYSCLKConfig+0x34>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f023 0303 	bic.w	r3, r3, #3
 8000484:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4313      	orrs	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800048e:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <RCC_SYSCLKConfig+0x34>)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	6053      	str	r3, [r2, #4]
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <RCC_HCLKConfig+0x34>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004bc:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004c6:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <RCC_HCLKConfig+0x34>)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	6053      	str	r3, [r2, #4]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <RCC_PCLK1Config+0x34>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004f4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <RCC_PCLK1Config+0x34>)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6053      	str	r3, [r2, #4]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <RCC_PCLK2Config+0x34>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800052c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	4313      	orrs	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <RCC_PCLK2Config+0x34>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000564:	4b4c      	ldr	r3, [pc, #304]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f003 030c 	and.w	r3, r3, #12
 800056c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d007      	beq.n	8000584 <RCC_GetClocksFreq+0x38>
 8000574:	2b08      	cmp	r3, #8
 8000576:	d009      	beq.n	800058c <RCC_GetClocksFreq+0x40>
 8000578:	2b00      	cmp	r3, #0
 800057a:	d133      	bne.n	80005e4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a47      	ldr	r2, [pc, #284]	; (800069c <RCC_GetClocksFreq+0x150>)
 8000580:	601a      	str	r2, [r3, #0]
      break;
 8000582:	e033      	b.n	80005ec <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a45      	ldr	r2, [pc, #276]	; (800069c <RCC_GetClocksFreq+0x150>)
 8000588:	601a      	str	r2, [r3, #0]
      break;
 800058a:	e02f      	b.n	80005ec <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800058c:	4b42      	ldr	r3, [pc, #264]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000594:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000596:	4b40      	ldr	r3, [pc, #256]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	0c9b      	lsrs	r3, r3, #18
 80005a4:	3302      	adds	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d106      	bne.n	80005bc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <RCC_GetClocksFreq+0x154>)
 80005b2:	fb02 f203 	mul.w	r2, r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80005ba:	e017      	b.n	80005ec <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80005bc:	4b36      	ldr	r3, [pc, #216]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <RCC_GetClocksFreq+0x154>)
 80005cc:	fb02 f203 	mul.w	r2, r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
      break;
 80005d4:	e00a      	b.n	80005ec <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	4a30      	ldr	r2, [pc, #192]	; (800069c <RCC_GetClocksFreq+0x150>)
 80005da:	fb02 f203 	mul.w	r2, r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
      break;
 80005e2:	e003      	b.n	80005ec <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	; (800069c <RCC_GetClocksFreq+0x150>)
 80005e8:	601a      	str	r2, [r3, #0]
      break;
 80005ea:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <RCC_GetClocksFreq+0x158>)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	40da      	lsrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800061c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <RCC_GetClocksFreq+0x158>)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	40da      	lsrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000644:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	0adb      	lsrs	r3, r3, #11
 800064a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <RCC_GetClocksFreq+0x158>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	40da      	lsrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <RCC_GetClocksFreq+0x14c>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	0b9b      	lsrs	r3, r3, #14
 8000672:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <RCC_GetClocksFreq+0x15c>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	fbb2 f2f3 	udiv	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	611a      	str	r2, [r3, #16]
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000
 800069c:	007a1200 	.word	0x007a1200
 80006a0:	003d0900 	.word	0x003d0900
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000010 	.word	0x20000010

080006ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006be:	4909      	ldr	r1, [pc, #36]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006c2:	699a      	ldr	r2, [r3, #24]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ca:	e006      	b.n	80006da <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006cc:	4905      	ldr	r1, [pc, #20]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4013      	ands	r3, r2
 80006d8:	618b      	str	r3, [r1, #24]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000

080006e8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000702:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	885b      	ldrh	r3, [r3, #2]
 800070c:	4313      	orrs	r3, r2
 800070e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000714:	4313      	orrs	r3, r2
 8000716:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800071c:	4313      	orrs	r3, r2
 800071e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000724:	4313      	orrs	r3, r2
 8000726:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800072c:	4313      	orrs	r3, r2
 800072e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000734:	4313      	orrs	r3, r2
 8000736:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800073c:	4313      	orrs	r3, r2
 800073e:	b29a      	uxth	r2, r3
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	4313      	orrs	r3, r2
 8000744:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	89fa      	ldrh	r2, [r7, #14]
 800074a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	8b9b      	ldrh	r3, [r3, #28]
 8000750:	b29b      	uxth	r3, r3
 8000752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	8a1a      	ldrh	r2, [r3, #16]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	821a      	strh	r2, [r3, #16]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	460b      	mov	r3, r1
 8000778:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078a:	b29a      	uxth	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000790:	e007      	b.n	80007a2 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800079c:	b29a      	uxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	801a      	strh	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	887a      	ldrh	r2, [r7, #2]
 80007bc:	819a      	strh	r2, [r3, #12]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	899b      	ldrh	r3, [r3, #12]
 80007d4:	b29b      	uxth	r3, r3
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	4013      	ands	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	da0b      	bge.n	8000844 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800082c:	490d      	ldr	r1, [pc, #52]	; (8000864 <NVIC_SetPriority+0x4c>)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	3b04      	subs	r3, #4
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000842:	e009      	b.n	8000858 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000844:	4908      	ldr	r1, [pc, #32]	; (8000868 <NVIC_SetPriority+0x50>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000e100 	.word	0xe000e100

0800086c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800087a:	d301      	bcc.n	8000880 <SysTick_Config+0x14>
 800087c:	2301      	movs	r3, #1
 800087e:	e011      	b.n	80008a4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SysTick_Config+0x40>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000888:	3b01      	subs	r3, #1
 800088a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800088c:	210f      	movs	r1, #15
 800088e:	f04f 30ff 	mov.w	r0, #4294967295
 8000892:	f7ff ffc1 	bl	8000818 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Config+0x40>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <SysTick_Config+0x40>)
 800089e:	2207      	movs	r2, #7
 80008a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <CustomInit>:
/**
  * @brief  Configures all the hardware for custom needs
  * @param  None
  * @retval None
  */
void CustomInit(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	CustomClockConfigHSI64();
 80008b4:	f000 f80e 	bl	80008d4 <CustomClockConfigHSI64>
	//CustomGPIOConfig();
	CustomSPIConfig();
 80008b8:	f000 f830 	bl	800091c <CustomSPIConfig>
	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	GPIO_SetBits(GPIOA, GPIO_Pin_5);
	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	 */

	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 80008bc:	f06f 0004 	mvn.w	r0, #4
 80008c0:	f7ff fc58 	bl	8000174 <SysTick_CLKSourceConfig>
	//64MHz AHB -> /8
	// 80000 ticks 	-> 100Hz SysTick
	// 800000 ticks -> 10Hz SysTicks
	SysTick_Config(80000);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <CustomInit+0x20>)
 80008c6:	f7ff ffd1 	bl	800086c <SysTick_Config>


}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	00013880 	.word	0x00013880

080008d4 <CustomClockConfigHSI64>:
  * so that SYSCLK = HCLK = PCLK2 = APB2CLK = 64MHz
  * and PCLK1 = APB1CLK = 32MHz
  * @param  None
  * @retval None
  */
void CustomClockConfigHSI64(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	RCC_DeInit();
 80008d8:	f7ff fd5c 	bl	8000394 <RCC_DeInit>
	RCC_HSICmd(ENABLE);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fd87 	bl	80003f0 <RCC_HSICmd>
	RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul_16);
 80008e2:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fd92 	bl	8000410 <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fdad 	bl	800044c <RCC_PLLCmd>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80008f2:	2002      	movs	r0, #2
 80008f4:	f7ff fdba 	bl	800046c <RCC_SYSCLKConfig>
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fdd3 	bl	80004a4 <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div2);
 80008fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000902:	f7ff fdeb 	bl	80004dc <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);
 8000906:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800090a:	f7ff fe03 	bl	8000514 <RCC_PCLK2Config>

	//apparently necessary
	FLASH_SetLatency(FLASH_Latency_2);
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff fc4c 	bl	80001ac <FLASH_SetLatency>

	// update SystemCoreClock variable
	SystemCoreClockUpdate();
 8000914:	f003 f988 	bl	8003c28 <SystemCoreClockUpdate>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <CustomSPIConfig>:

void CustomSPIConfig(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
	// PC_1 - RESET
	// CPOL=1, CPHA=1
	// 8bit frame

	// Set clock to SPI1 interface @APB2
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000922:	2101      	movs	r1, #1
 8000924:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000928:	f7ff fec0 	bl	80006ac <RCC_APB2PeriphClockCmd>
	// Set clock to AFIO module
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff febc 	bl	80006ac <RCC_APB2PeriphClockCmd>
	// Set clock to PA pins - SPI pins
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000934:	2101      	movs	r1, #1
 8000936:	2004      	movs	r0, #4
 8000938:	f7ff feb8 	bl	80006ac <RCC_APB2PeriphClockCmd>
	// Set clock to PC pins - Chip select
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800093c:	2101      	movs	r1, #1
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff feb4 	bl	80006ac <RCC_APB2PeriphClockCmd>

	//Configure PA_5/6/7 as output 50MHz pushpull alternate function. Although why PA_6 as output when it is Master Input???
	GPIO_InitTypeDef pins;
	pins.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000944:	23e0      	movs	r3, #224	; 0xe0
 8000946:	82bb      	strh	r3, [r7, #20]
	pins.GPIO_Speed = GPIO_Speed_50MHz;
 8000948:	2303      	movs	r3, #3
 800094a:	75bb      	strb	r3, [r7, #22]
	pins.GPIO_Mode = GPIO_Mode_AF_PP;
 800094c:	2318      	movs	r3, #24
 800094e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &pins);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4818      	ldr	r0, [pc, #96]	; (80009b8 <CustomSPIConfig+0x9c>)
 8000958:	f7ff fc44 	bl	80001e4 <GPIO_Init>

	// Initially set SCK to starting state (HIGH)
	GPIO_SetBits(GPIOA, GPIO_Pin_5);
 800095c:	2120      	movs	r1, #32
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <CustomSPIConfig+0x9c>)
 8000960:	f7ff fcfc 	bl	800035c <GPIO_SetBits>

	// Configure PC0 and PC1 as output 50MHz push-pull
	pins.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000964:	2303      	movs	r3, #3
 8000966:	82bb      	strh	r3, [r7, #20]
	pins.GPIO_Speed = GPIO_Speed_50MHz;
 8000968:	2303      	movs	r3, #3
 800096a:	75bb      	strb	r3, [r7, #22]
	pins.GPIO_Mode = GPIO_Mode_Out_PP;
 800096c:	2310      	movs	r3, #16
 800096e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &pins);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <CustomSPIConfig+0xa0>)
 8000978:	f7ff fc34 	bl	80001e4 <GPIO_Init>
	// Initially set to HIGH - chip not selected, no reset
	GPIO_SetBits(GPIOC, GPIO_Pin_0);
 800097c:	2101      	movs	r1, #1
 800097e:	480f      	ldr	r0, [pc, #60]	; (80009bc <CustomSPIConfig+0xa0>)
 8000980:	f7ff fcec 	bl	800035c <GPIO_SetBits>
	GPIO_SetBits(GPIOC, GPIO_Pin_1);
 8000984:	2102      	movs	r1, #2
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <CustomSPIConfig+0xa0>)
 8000988:	f7ff fce8 	bl	800035c <GPIO_SetBits>

	// Configure SPI baudrate - PCLK2(64MHz) /32 = 2MHz
	SPI_InitTypeDef spiconf;
	spiconf.SPI_Mode = SPI_Mode_Master;
 800098c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000990:	807b      	strh	r3, [r7, #2]
	spiconf.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 8000992:	2320      	movs	r3, #32
 8000994:	81bb      	strh	r3, [r7, #12]
	spiconf.SPI_CPOL = SPI_CPOL_High;
 8000996:	2302      	movs	r3, #2
 8000998:	80fb      	strh	r3, [r7, #6]
	spiconf.SPI_CPHA = SPI_CPHA_2Edge;
 800099a:	2301      	movs	r3, #1
 800099c:	813b      	strh	r3, [r7, #8]
	SPI_Init(SPI1, &spiconf);
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <CustomSPIConfig+0xa4>)
 80009a4:	f7ff fea0 	bl	80006e8 <SPI_Init>
	// SPI enable
	SPI_Cmd(SPI1, ENABLE);
 80009a8:	2101      	movs	r1, #1
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <CustomSPIConfig+0xa4>)
 80009ac:	f7ff fedf 	bl	800076e <SPI_Cmd>

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40013000 	.word	0x40013000

080009c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3b04      	subs	r3, #4
 80009d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3b04      	subs	r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f023 0201 	bic.w	r2, r3, #1
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3b04      	subs	r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <pxPortInitialiseStack+0x54>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3b14      	subs	r3, #20
 80009fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3b20      	subs	r3, #32
 8000a0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	08000a1d 	.word	0x08000a1d

08000a1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <prvTaskExitError+0x4c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2e:	d009      	beq.n	8000a44 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e7fe      	b.n	8000a42 <prvTaskExitError+0x26>
 8000a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a48:	f383 8811 	msr	BASEPRI, r3
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000a56:	bf00      	nop
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0fc      	beq.n	8000a58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000014 	.word	0x20000014
 8000a6c:	00000000 	.word	0x00000000

08000a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <pxCurrentTCBConst2>)
 8000a72:	6819      	ldr	r1, [r3, #0]
 8000a74:	6808      	ldr	r0, [r1, #0]
 8000a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a7a:	f380 8809 	msr	PSP, r0
 8000a7e:	f3bf 8f6f 	isb	sy
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	f380 8811 	msr	BASEPRI, r0
 8000a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000a8e:	4770      	bx	lr

08000a90 <pxCurrentTCBConst2>:
 8000a90:	20001cbc 	.word	0x20001cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop

08000a98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <prvPortStartFirstTask+0x1c>)
 8000a9a:	6800      	ldr	r0, [r0, #0]
 8000a9c:	6800      	ldr	r0, [r0, #0]
 8000a9e:	f380 8808 	msr	MSP, r0
 8000aa2:	b662      	cpsie	i
 8000aa4:	b661      	cpsie	f
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	df00      	svc	0
 8000ab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000ab2:	bf00      	nop
 8000ab4:	e000ed08 	.word	0xe000ed08

08000ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <xPortStartScheduler+0xcc>)
 8000ac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	22ff      	movs	r2, #255	; 0xff
 8000ace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <xPortStartScheduler+0xd0>)
 8000ae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000aec:	e009      	b.n	8000b02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000af6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	2b80      	cmp	r3, #128	; 0x80
 8000b0c:	d0ef      	beq.n	8000aee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d009      	beq.n	8000b2e <xPortStartScheduler+0x76>
 8000b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1e:	f383 8811 	msr	BASEPRI, r3
 8000b22:	f3bf 8f6f 	isb	sy
 8000b26:	f3bf 8f4f 	dsb	sy
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	e7fe      	b.n	8000b2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <xPortStartScheduler+0xd4>)
 8000b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <xPortStartScheduler+0xd8>)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <xPortStartScheduler+0xd8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <xPortStartScheduler+0xd8>)
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <xPortStartScheduler+0xd8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000b64:	f000 f8b0 	bl	8000cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <xPortStartScheduler+0xdc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000b6e:	f7ff ff93 	bl	8000a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000b72:	f001 fd71 	bl	8002658 <vTaskSwitchContext>
	prvTaskExitError();
 8000b76:	f7ff ff51 	bl	8000a1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	e000e400 	.word	0xe000e400
 8000b88:	200000ac 	.word	0x200000ac
 8000b8c:	200000b0 	.word	0x200000b0
 8000b90:	e000ed20 	.word	0xe000ed20
 8000b94:	20000014 	.word	0x20000014

08000b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <vPortEnterCritical+0x54>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <vPortEnterCritical+0x54>)
 8000bb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <vPortEnterCritical+0x54>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10e      	bne.n	8000be0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <vPortEnterCritical+0x58>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d009      	beq.n	8000be0 <vPortEnterCritical+0x48>
 8000bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd0:	f383 8811 	msr	BASEPRI, r3
 8000bd4:	f3bf 8f6f 	isb	sy
 8000bd8:	f3bf 8f4f 	dsb	sy
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	e7fe      	b.n	8000bde <vPortEnterCritical+0x46>
	}
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000014 	.word	0x20000014
 8000bf0:	e000ed04 	.word	0xe000ed04

08000bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <vPortExitCritical+0x48>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <vPortExitCritical+0x22>
 8000c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c06:	f383 8811 	msr	BASEPRI, r3
 8000c0a:	f3bf 8f6f 	isb	sy
 8000c0e:	f3bf 8f4f 	dsb	sy
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	e7fe      	b.n	8000c14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <vPortExitCritical+0x48>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <vPortExitCritical+0x48>)
 8000c1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <vPortExitCritical+0x48>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <vPortExitCritical+0x3e>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000014 	.word	0x20000014

08000c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000c40:	f3ef 8009 	mrs	r0, PSP
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <pxCurrentTCBConst>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c50:	6010      	str	r0, [r2, #0]
 8000c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c5a:	f380 8811 	msr	BASEPRI, r0
 8000c5e:	f001 fcfb 	bl	8002658 <vTaskSwitchContext>
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f380 8811 	msr	BASEPRI, r0
 8000c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	6808      	ldr	r0, [r1, #0]
 8000c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c76:	f380 8809 	msr	PSP, r0
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	4770      	bx	lr

08000c80 <pxCurrentTCBConst>:
 8000c80:	20001cbc 	.word	0x20001cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop

08000c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/


void xPortSysTickHandler( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8000c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c92:	f383 8811 	msr	BASEPRI, r3
 8000c96:	f3bf 8f6f 	isb	sy
 8000c9a:	f3bf 8f4f 	dsb	sy
 8000c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000ca0:	f001 fc1a 	bl	80024d8 <xTaskIncrementTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SysTick_Handler+0x3c>)
 8000cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000ed04 	.word	0xe000ed04

08000cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <vPortSetupTimerInterrupt+0x24>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <vPortSetupTimerInterrupt+0x28>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <vPortSetupTimerInterrupt+0x2c>)
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <vPortSetupTimerInterrupt+0x30>)
 8000cdc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <vPortSetupTimerInterrupt+0x24>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	e000e010 	.word	0xe000e010
 8000cf0:	e000e018 	.word	0xe000e018
 8000cf4:	e000e014 	.word	0xe000e014
 8000cf8:	0009c3ff 	.word	0x0009c3ff

08000cfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000d02:	f3ef 8305 	mrs	r3, IPSR
 8000d06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d913      	bls.n	8000d36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <vPortValidateInterruptPriority+0x68>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <vPortValidateInterruptPriority+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	7afa      	ldrb	r2, [r7, #11]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d209      	bcs.n	8000d36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	e7fe      	b.n	8000d34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <vPortValidateInterruptPriority+0x70>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <vPortValidateInterruptPriority+0x74>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <vPortValidateInterruptPriority+0x5e>
 8000d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4a:	f383 8811 	msr	BASEPRI, r3
 8000d4e:	f3bf 8f6f 	isb	sy
 8000d52:	f3bf 8f4f 	dsb	sy
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	e7fe      	b.n	8000d58 <vPortValidateInterruptPriority+0x5c>
	}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	e000e3f0 	.word	0xe000e3f0
 8000d68:	200000ac 	.word	0x200000ac
 8000d6c:	e000ed0c 	.word	0xe000ed0c
 8000d70:	200000b0 	.word	0x200000b0

08000d74 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f023 0307 	bic.w	r3, r3, #7
 8000d90:	3308      	adds	r3, #8
 8000d92:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000d94:	f001 fae8 	bl	8002368 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <pvPortMalloc+0x88>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <pvPortMalloc+0x8c>)
 8000da2:	f023 0307 	bic.w	r3, r3, #7
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <pvPortMalloc+0x88>)
 8000daa:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <pvPortMalloc+0x90>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d813      	bhi.n	8000de4 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <pvPortMalloc+0x90>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <pvPortMalloc+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d90b      	bls.n	8000de4 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <pvPortMalloc+0x88>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <pvPortMalloc+0x90>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <pvPortMalloc+0x90>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <pvPortMalloc+0x90>)
 8000de2:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000de4:	f001 face 	bl	8002384 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000dee:	f002 fc33 	bl	8003658 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20001cb8 	.word	0x20001cb8
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	20001cb4 	.word	0x20001cb4

08000e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d009      	beq.n	8000e2a <vPortFree+0x22>
 8000e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1a:	f383 8811 	msr	BASEPRI, r3
 8000e1e:	f3bf 8f6f 	isb	sy
 8000e22:	f3bf 8f4f 	dsb	sy
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e7fe      	b.n	8000e28 <vPortFree+0x20>
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f103 0208 	add.w	r2, r3, #8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f103 0208 	add.w	r2, r3, #8
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f103 0208 	add.w	r2, r3, #8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee6:	d103      	bne.n	8000ef0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e00c      	b.n	8000f0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e002      	b.n	8000efe <vListInsert+0x2e>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d9f6      	bls.n	8000ef8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6892      	ldr	r2, [r2, #8]
 8000f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6852      	ldr	r2, [r2, #4]
 8000f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d103      	bne.n	8000f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <xQueueGenericReset+0x28>
 8000fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fac:	f383 8811 	msr	BASEPRI, r3
 8000fb0:	f3bf 8f6f 	isb	sy
 8000fb4:	f3bf 8f4f 	dsb	sy
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e7fe      	b.n	8000fba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000fbc:	f7ff fdec 	bl	8000b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	441a      	add	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	3b01      	subs	r3, #1
 8000fee:	68f9      	ldr	r1, [r7, #12]
 8000ff0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d114      	bne.n	800103c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01a      	beq.n	8001050 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3310      	adds	r3, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fbd2 	bl	80027c8 <xTaskRemoveFromEventList>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d012      	beq.n	8001050 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <xQueueGenericReset+0xcc>)
 800102c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	e009      	b.n	8001050 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3310      	adds	r3, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fef7 	bl	8000e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3324      	adds	r3, #36	; 0x24
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fef2 	bl	8000e34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001050:	f7ff fdd0 	bl	8000bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	4613      	mov	r3, r2
 8001070:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <xQueueGenericCreate+0x28>
 8001078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e7fe      	b.n	800108a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e004      	b.n	80010a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3348      	adds	r3, #72	; 0x48
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe64 	bl	8000d74 <pvPortMalloc>
 80010ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00d      	beq.n	80010d0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3348      	adds	r3, #72	; 0x48
 80010bc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 f805 	bl	80010da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80010d0:	69bb      	ldr	r3, [r7, #24]
	}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e002      	b.n	80010fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001108:	2101      	movs	r1, #1
 800110a:	69b8      	ldr	r0, [r7, #24]
 800110c:	f7ff ff42 	bl	8000f94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <xQueueGenericSend+0x30>
 8001134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	e7fe      	b.n	8001146 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <xQueueGenericSend+0x3e>
 800114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <xQueueGenericSend+0x42>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <xQueueGenericSend+0x44>
 800115a:	2300      	movs	r3, #0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <xQueueGenericSend+0x5c>
 8001160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	e7fe      	b.n	8001172 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <xQueueGenericSend+0x6a>
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <xQueueGenericSend+0x6e>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <xQueueGenericSend+0x70>
 8001186:	2300      	movs	r3, #0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <xQueueGenericSend+0x88>
 800118c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001190:	f383 8811 	msr	BASEPRI, r3
 8001194:	f3bf 8f6f 	isb	sy
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	e7fe      	b.n	800119e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011a0:	f001 fcde 	bl	8002b60 <xTaskGetSchedulerState>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <xQueueGenericSend+0x98>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <xQueueGenericSend+0x9c>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <xQueueGenericSend+0x9e>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <xQueueGenericSend+0xb6>
 80011ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	e7fe      	b.n	80011cc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011ce:	f7ff fce3 	bl	8000b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	429a      	cmp	r2, r3
 80011dc:	d302      	bcc.n	80011e4 <xQueueGenericSend+0xcc>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d129      	bne.n	8001238 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011ea:	f000 fa1c 	bl	8001626 <prvCopyDataToQueue>
 80011ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d010      	beq.n	800121a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	3324      	adds	r3, #36	; 0x24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fae3 	bl	80027c8 <xTaskRemoveFromEventList>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001208:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <xQueueGenericSend+0x1f0>)
 800120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	f3bf 8f4f 	dsb	sy
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	e00a      	b.n	8001230 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <xQueueGenericSend+0x1f0>)
 8001222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001230:	f7ff fce0 	bl	8000bf4 <vPortExitCritical>
				return pdPASS;
 8001234:	2301      	movs	r3, #1
 8001236:	e063      	b.n	8001300 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800123e:	f7ff fcd9 	bl	8000bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001242:	2300      	movs	r3, #0
 8001244:	e05c      	b.n	8001300 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fb41 	bl	80028d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001256:	2301      	movs	r3, #1
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800125a:	f7ff fccb 	bl	8000bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800125e:	f001 f883 	bl	8002368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001262:	f7ff fc99 	bl	8000b98 <vPortEnterCritical>
 8001266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001272:	d103      	bne.n	800127c <xQueueGenericSend+0x164>
 8001274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001282:	b25b      	sxtb	r3, r3
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d103      	bne.n	8001292 <xQueueGenericSend+0x17a>
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001292:	f7ff fcaf 	bl	8000bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001296:	1d3a      	adds	r2, r7, #4
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb30 	bl	8002904 <xTaskCheckForTimeOut>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d124      	bne.n	80012f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80012aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ac:	f000 fab3 	bl	8001816 <prvIsQueueFull>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d018      	beq.n	80012e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	3310      	adds	r3, #16
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fa34 	bl	800272c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80012c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012c6:	f000 fa3e 	bl	8001746 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80012ca:	f001 f85b 	bl	8002384 <xTaskResumeAll>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f af7c 	bne.w	80011ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <xQueueGenericSend+0x1f0>)
 80012d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	e772      	b.n	80011ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80012e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ea:	f000 fa2c 	bl	8001746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012ee:	f001 f849 	bl	8002384 <xTaskResumeAll>
 80012f2:	e76c      	b.n	80011ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80012f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012f6:	f000 fa26 	bl	8001746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012fa:	f001 f843 	bl	8002384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80012fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	; 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	e000ed04 	.word	0xe000ed04

0800130c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <xQueueGenericSendFromISR+0x2c>
 8001324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001328:	f383 8811 	msr	BASEPRI, r3
 800132c:	f3bf 8f6f 	isb	sy
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e7fe      	b.n	8001336 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <xQueueGenericSendFromISR+0x3a>
 800133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <xQueueGenericSendFromISR+0x3e>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <xQueueGenericSendFromISR+0x40>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <xQueueGenericSendFromISR+0x58>
 8001350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001354:	f383 8811 	msr	BASEPRI, r3
 8001358:	f3bf 8f6f 	isb	sy
 800135c:	f3bf 8f4f 	dsb	sy
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	e7fe      	b.n	8001362 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d103      	bne.n	8001372 <xQueueGenericSendFromISR+0x66>
 800136a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <xQueueGenericSendFromISR+0x6a>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <xQueueGenericSendFromISR+0x6c>
 8001376:	2300      	movs	r3, #0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <xQueueGenericSendFromISR+0x84>
 800137c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001380:	f383 8811 	msr	BASEPRI, r3
 8001384:	f3bf 8f6f 	isb	sy
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	e7fe      	b.n	800138e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001390:	f7ff fcb4 	bl	8000cfc <vPortValidateInterruptPriority>
	__asm volatile
 8001394:	f3ef 8211 	mrs	r2, BASEPRI
 8001398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139c:	f383 8811 	msr	BASEPRI, r3
 80013a0:	f3bf 8f6f 	isb	sy
 80013a4:	f3bf 8f4f 	dsb	sy
 80013a8:	61ba      	str	r2, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80013ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d302      	bcc.n	80013c2 <xQueueGenericSendFromISR+0xb6>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d12c      	bne.n	800141c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013d2:	f000 f928 	bl	8001626 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80013d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d112      	bne.n	8001406 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d016      	beq.n	8001416 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	3324      	adds	r3, #36	; 0x24
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f9eb 	bl	80027c8 <xTaskRemoveFromEventList>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800140a:	3301      	adds	r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b25a      	sxtb	r2, r3
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001416:	2301      	movs	r3, #1
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800141a:	e001      	b.n	8001420 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	; 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <xQueueReceive+0x2e>
	__asm volatile
 800144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	623b      	str	r3, [r7, #32]
 8001460:	e7fe      	b.n	8001460 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <xQueueReceive+0x3c>
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <xQueueReceive+0x40>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <xQueueReceive+0x42>
 8001474:	2300      	movs	r3, #0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <xQueueReceive+0x5a>
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e7fe      	b.n	800148c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800148e:	f001 fb67 	bl	8002b60 <xTaskGetSchedulerState>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <xQueueReceive+0x6a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <xQueueReceive+0x6e>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <xQueueReceive+0x70>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <xQueueReceive+0x88>
 80014a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e7fe      	b.n	80014ba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80014bc:	f7ff fb6c 	bl	8000b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01f      	beq.n	800150c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014d0:	f000 f913 	bl	80016fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00f      	beq.n	8001504 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	3310      	adds	r3, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f96d 	bl	80027c8 <xTaskRemoveFromEventList>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80014f4:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <xQueueReceive+0x1b4>)
 80014f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001504:	f7ff fb76 	bl	8000bf4 <vPortExitCritical>
				return pdPASS;
 8001508:	2301      	movs	r3, #1
 800150a:	e069      	b.n	80015e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001512:	f7ff fb6f 	bl	8000bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001516:	2300      	movs	r3, #0
 8001518:	e062      	b.n	80015e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f001 f9d7 	bl	80028d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800152a:	2301      	movs	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800152e:	f7ff fb61 	bl	8000bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001532:	f000 ff19 	bl	8002368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001536:	f7ff fb2f 	bl	8000b98 <vPortEnterCritical>
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001540:	b25b      	sxtb	r3, r3
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d103      	bne.n	8001550 <xQueueReceive+0x11c>
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001556:	b25b      	sxtb	r3, r3
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d103      	bne.n	8001566 <xQueueReceive+0x132>
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001566:	f7ff fb45 	bl	8000bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800156a:	1d3a      	adds	r2, r7, #4
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f9c6 	bl	8002904 <xTaskCheckForTimeOut>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d123      	bne.n	80015c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800157e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001580:	f000 f933 	bl	80017ea <prvIsQueueEmpty>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d017      	beq.n	80015ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	3324      	adds	r3, #36	; 0x24
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f8ca 	bl	800272c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159a:	f000 f8d4 	bl	8001746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800159e:	f000 fef1 	bl	8002384 <xTaskResumeAll>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d189      	bne.n	80014bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <xQueueReceive+0x1b4>)
 80015aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	e780      	b.n	80014bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80015ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015bc:	f000 f8c3 	bl	8001746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80015c0:	f000 fee0 	bl	8002384 <xTaskResumeAll>
 80015c4:	e77a      	b.n	80014bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80015c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c8:	f000 f8bd 	bl	8001746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80015cc:	f000 feda 	bl	8002384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d2:	f000 f90a 	bl	80017ea <prvIsQueueEmpty>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f43f af6f 	beq.w	80014bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80015de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e000ed04 	.word	0xe000ed04

080015ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <uxQueueMessagesWaiting+0x22>
 80015fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fe:	f383 8811 	msr	BASEPRI, r3
 8001602:	f3bf 8f6f 	isb	sy
 8001606:	f3bf 8f4f 	dsb	sy
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	e7fe      	b.n	800160c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800160e:	f7ff fac3 	bl	8000b98 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8001618:	f7ff faec 	bl	8000bf4 <vPortExitCritical>

	return uxReturn;
 800161c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10d      	bne.n	8001660 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d14d      	bne.n	80016e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 faa3 	bl	8002b9c <xTaskPriorityDisinherit>
 8001656:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e043      	b.n	80016e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6858      	ldr	r0, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	461a      	mov	r2, r3
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	f002 fd81 	bl	8004178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	441a      	add	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d32b      	bcc.n	80016e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	e026      	b.n	80016e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68d8      	ldr	r0, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	461a      	mov	r2, r3
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	f002 fd67 	bl	8004178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	425b      	negs	r3, r3
 80016b4:	441a      	add	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d207      	bcs.n	80016d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	425b      	negs	r3, r3
 80016d0:	441a      	add	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d105      	bne.n	80016e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80016f0:	697b      	ldr	r3, [r7, #20]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d018      	beq.n	800173e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	441a      	add	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d303      	bcc.n	800172e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	461a      	mov	r2, r3
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f002 fd1d 	bl	8004178 <memcpy>
	}
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800174e:	f7ff fa23 	bl	8000b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001758:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800175a:	e011      	b.n	8001780 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2b00      	cmp	r3, #0
 8001762:	d012      	beq.n	800178a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3324      	adds	r3, #36	; 0x24
 8001768:	4618      	mov	r0, r3
 800176a:	f001 f82d 	bl	80027c8 <xTaskRemoveFromEventList>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001774:	f001 f926 	bl	80029c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3b01      	subs	r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dce9      	bgt.n	800175c <prvUnlockQueue+0x16>
 8001788:	e000      	b.n	800178c <prvUnlockQueue+0x46>
					break;
 800178a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001794:	f7ff fa2e 	bl	8000bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001798:	f7ff f9fe 	bl	8000b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80017a4:	e011      	b.n	80017ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3310      	adds	r3, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f808 	bl	80027c8 <xTaskRemoveFromEventList>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80017be:	f001 f901 	bl	80029c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80017ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	dce9      	bgt.n	80017a6 <prvUnlockQueue+0x60>
 80017d2:	e000      	b.n	80017d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80017d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	22ff      	movs	r2, #255	; 0xff
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80017de:	f7ff fa09 	bl	8000bf4 <vPortExitCritical>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017f2:	f7ff f9d1 	bl	8000b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80017fe:	2301      	movs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e001      	b.n	8001808 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001808:	f7ff f9f4 	bl	8000bf4 <vPortExitCritical>

	return xReturn;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800181e:	f7ff f9bb 	bl	8000b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	429a      	cmp	r2, r3
 800182c:	d102      	bne.n	8001834 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800182e:	2301      	movs	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e001      	b.n	8001838 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001838:	f7ff f9dc 	bl	8000bf4 <vPortExitCritical>

	return xReturn;
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001856:	f7ff f99f 	bl	8000b98 <vPortEnterCritical>
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d103      	bne.n	8001870 <vQueueWaitForMessageRestricted+0x2a>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001876:	b25b      	sxtb	r3, r3
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d103      	bne.n	8001886 <vQueueWaitForMessageRestricted+0x40>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001886:	f7ff f9b5 	bl	8000bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3324      	adds	r3, #36	; 0x24
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ff6a 	bl	8002774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ff50 	bl	8001746 <prvUnlockQueue>
	}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08c      	sub	sp, #48	; 0x30
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10f      	bne.n	80018e0 <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d819      	bhi.n	8001900 <xStreamBufferGenericCreate+0x52>
 80018cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d0:	f383 8811 	msr	BASEPRI, r3
 80018d4:	f3bf 8f6f 	isb	sy
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e7fe      	b.n	80018de <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <xStreamBufferGenericCreate+0x52>
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e7fe      	b.n	80018fe <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d909      	bls.n	800191c <xStreamBufferGenericCreate+0x6e>
 8001908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190c:	f383 8811 	msr	BASEPRI, r3
 8001910:	f3bf 8f6f 	isb	sy
 8001914:	f3bf 8f4f 	dsb	sy
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e7fe      	b.n	800191a <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3320      	adds	r3, #32
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa1f 	bl	8000d74 <pvPortMalloc>
 8001936:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f103 0120 	add.w	r1, r3, #32
 8001944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6a38      	ldr	r0, [r7, #32]
 8001950:	f000 fb22 	bl	8001f98 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8001954:	6a3b      	ldr	r3, [r7, #32]
	}
 8001956:	4618      	mov	r0, r3
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <xStreamBufferReset>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b088      	sub	sp, #32
 8001962:	af02      	add	r7, sp, #8
 8001964:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	613b      	str	r3, [r7, #16]
BaseType_t xReturn = pdFAIL;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <xStreamBufferReset+0x2a>
 8001974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001978:	f383 8811 	msr	BASEPRI, r3
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e7fe      	b.n	8001986 <xStreamBufferReset+0x28>
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 8001988:	f7ff f906 	bl	8000b98 <vPortEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d112      	bne.n	80019ba <xStreamBufferReset+0x5c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10e      	bne.n	80019ba <xStreamBufferReset+0x5c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6999      	ldr	r1, [r3, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	68d8      	ldr	r0, [r3, #12]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	7f1b      	ldrb	r3, [r3, #28]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4603      	mov	r3, r0
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f000 faf1 	bl	8001f98 <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 80019ba:	f7ff f91b 	bl	8000bf4 <vPortExitCritical>

	return xReturn;
 80019be:	697b      	ldr	r3, [r7, #20]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <xStreamBufferSpacesAvailable+0x26>
 80019da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	f3bf 8f6f 	isb	sy
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e7fe      	b.n	80019ec <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d804      	bhi.n	8001a1e <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8001a1e:	697b      	ldr	r3, [r7, #20]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b090      	sub	sp, #64	; 0x40
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <xStreamBufferSend+0x34>
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	e7fe      	b.n	8001a5c <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <xStreamBufferSend+0x4e>
 8001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	e7fe      	b.n	8001a76 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	7f1b      	ldrb	r3, [r3, #28]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	3304      	adds	r3, #4
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8001a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d809      	bhi.n	8001aa6 <xStreamBufferSend+0x7c>
 8001a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	e7fe      	b.n	8001aa4 <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03d      	beq.n	8001b28 <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 feeb 	bl	800288c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8001ab6:	f7ff f86f 	bl	8000b98 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001abc:	f7ff ff84 	bl	80019c8 <xStreamBufferSpacesAvailable>
 8001ac0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8001ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d216      	bcs.n	8001af8 <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8001aca:	2000      	movs	r0, #0
 8001acc:	f001 f9f6 	bl	8002ebc <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <xStreamBufferSend+0xc2>
 8001ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001adc:	f383 8811 	msr	BASEPRI, r3
 8001ae0:	f3bf 8f6f 	isb	sy
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	e7fe      	b.n	8001aea <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8001aec:	f001 f82a 	bl	8002b44 <xTaskGetCurrentTaskHandle>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	615a      	str	r2, [r3, #20]
 8001af6:	e002      	b.n	8001afe <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8001af8:	f7ff f87c 	bl	8000bf4 <vPortExitCritical>
					break;
 8001afc:	e014      	b.n	8001b28 <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 8001afe:	f7ff f879 	bl	8000bf4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f001 f8cb 	bl	8002ca4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8001b14:	463a      	mov	r2, r7
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fef1 	bl	8002904 <xTaskCheckForTimeOut>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0c6      	beq.n	8001ab6 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b30:	f7ff ff4a 	bl	80019c8 <xStreamBufferSpacesAvailable>
 8001b34:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b42:	f000 f823 	bl	8001b8c <prvWriteMessageToBuffer>
 8001b46:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <xStreamBufferSend+0x158>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b50:	f000 fa03 	bl	8001f5a <prvBytesInBuffer>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d311      	bcc.n	8001b82 <xStreamBufferSend+0x158>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8001b5e:	f000 fc03 	bl	8002368 <vTaskSuspendAll>
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <xStreamBufferSend+0x154>
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	6918      	ldr	r0, [r3, #16]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	f001 f8f0 	bl	8002d58 <xTaskGenericNotify>
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	f000 fc01 	bl	8002384 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e01d      	b.n	8001be2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	7f1b      	ldrb	r3, [r3, #28]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	bf28      	it	cs
 8001bbe:	4613      	movcs	r3, r2
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e00e      	b.n	8001be2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d308      	bcc.n	8001bde <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f8d9 	bl	8001d8e <prvWriteBytesToBuffer>
 8001bdc:	e001      	b.n	8001be2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f8cd 	bl	8001d8e <prvWriteBytesToBuffer>
 8001bf4:	6138      	str	r0, [r7, #16]
 8001bf6:	e001      	b.n	8001bfc <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8001bfc:	693b      	ldr	r3, [r7, #16]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08e      	sub	sp, #56	; 0x38
 8001c0a:	af02      	add	r7, sp, #8
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <xStreamBufferReceive+0x30>
 8001c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e7fe      	b.n	8001c34 <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <xStreamBufferReceive+0x4a>
 8001c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	e7fe      	b.n	8001c4e <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	7f1b      	ldrb	r3, [r3, #28]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e001      	b.n	8001c66 <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d033      	beq.n	8001cd4 <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8001c6c:	f7fe ff94 	bl	8000b98 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f000 f972 	bl	8001f5a <prvBytesInBuffer>
 8001c76:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d815      	bhi.n	8001cac <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8001c80:	2000      	movs	r0, #0
 8001c82:	f001 f91b 	bl	8002ebc <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <xStreamBufferReceive+0x9c>
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e7fe      	b.n	8001ca0 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001ca2:	f000 ff4f 	bl	8002b44 <xTaskGetCurrentTaskHandle>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001cac:	f7fe ffa2 	bl	8000bf4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d811      	bhi.n	8001cdc <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 fff0 	bl	8002ca4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001cca:	6a38      	ldr	r0, [r7, #32]
 8001ccc:	f000 f945 	bl	8001f5a <prvBytesInBuffer>
 8001cd0:	62b8      	str	r0, [r7, #40]	; 0x28
 8001cd2:	e003      	b.n	8001cdc <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001cd4:	6a38      	ldr	r0, [r7, #32]
 8001cd6:	f000 f940 	bl	8001f5a <prvBytesInBuffer>
 8001cda:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8001cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d91d      	bls.n	8001d20 <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6a38      	ldr	r0, [r7, #32]
 8001cf0:	f000 f81b 	bl	8001d2a <prvReadMessageFromBuffer>
 8001cf4:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d011      	beq.n	8001d20 <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8001cfc:	f000 fb34 	bl	8002368 <vTaskSuspendAll>
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <xStreamBufferReceive+0x116>
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	6958      	ldr	r0, [r3, #20]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	f001 f821 	bl	8002d58 <xTaskGenericNotify>
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	f000 fb32 	bl	8002384 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3730      	adds	r7, #48	; 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d019      	beq.n	8001d72 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8001d44:	f107 0110 	add.w	r1, r7, #16
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f88d 	bl	8001e6c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d907      	bls.n	8001d76 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e001      	b.n	8001d76 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f875 	bl	8001e6c <prvReadBytesFromBuffer>
 8001d82:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8001d84:	697b      	ldr	r3, [r7, #20]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b08a      	sub	sp, #40	; 0x28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <prvWriteBytesToBuffer+0x26>
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e7fe      	b.n	8001db2 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf28      	it	cs
 8001dc8:	4613      	movcs	r3, r2
 8001dca:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	441a      	add	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d909      	bls.n	8001dee <prvWriteBytesToBuffer+0x60>
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e7fe      	b.n	8001dec <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	4413      	add	r3, r2
 8001df6:	6a3a      	ldr	r2, [r7, #32]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f9bc 	bl	8004178 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d91b      	bls.n	8001e40 <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d909      	bls.n	8001e2a <prvWriteBytesToBuffer+0x9c>
 8001e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e7fe      	b.n	8001e28 <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6998      	ldr	r0, [r3, #24]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	18d1      	adds	r1, r2, r3
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f002 f99c 	bl	8004178 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d804      	bhi.n	8001e5c <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	605a      	str	r2, [r3, #4]

	return xCount;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bf28      	it	cs
 8001e82:	4613      	movcs	r3, r2
 8001e84:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d061      	beq.n	8001f50 <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad2      	subs	r2, r2, r3
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	bf28      	it	cs
 8001ea0:	4613      	movcs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d909      	bls.n	8001ec0 <prvReadBytesFromBuffer+0x54>
 8001eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb0:	f383 8811 	msr	BASEPRI, r3
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	e7fe      	b.n	8001ebe <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d909      	bls.n	8001ee2 <prvReadBytesFromBuffer+0x76>
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e7fe      	b.n	8001ee0 <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	4413      	add	r3, r2
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4619      	mov	r1, r3
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f002 f942 	bl	8004178 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d918      	bls.n	8001f2e <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d909      	bls.n	8001f18 <prvReadBytesFromBuffer+0xac>
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e7fe      	b.n	8001f16 <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	18d0      	adds	r0, r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6999      	ldr	r1, [r3, #24]
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f002 f925 	bl	8004178 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	4413      	add	r3, r2
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d804      	bhi.n	8001f4a <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d804      	bhi.n	8001f8c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8001fa6:	2355      	movs	r3, #85	; 0x55
 8001fa8:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f002 f8ed 	bl	800418e <memset>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d009      	beq.n	8001fd0 <prvInitialiseNewStreamBuffer+0x38>
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e7fe      	b.n	8001fce <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f002 f8da 	bl	800418e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ff2:	771a      	strb	r2, [r3, #28]
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af04      	add	r7, sp, #16
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe feaf 	bl	8000d74 <pvPortMalloc>
 8002016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00e      	beq.n	800203c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800201e:	2050      	movs	r0, #80	; 0x50
 8002020:	f7fe fea8 	bl	8000d74 <pvPortMalloc>
 8002024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
 8002032:	e005      	b.n	8002040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7fe fee7 	bl	8000e08 <vPortFree>
 800203a:	e001      	b.n	8002040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d013      	beq.n	800206e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	2300      	movs	r3, #0
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f80e 	bl	800207e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002062:	69f8      	ldr	r0, [r7, #28]
 8002064:	f000 f896 	bl	8002194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002068:	2301      	movs	r3, #1
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	e002      	b.n	8002074 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002074:	69bb      	ldr	r3, [r7, #24]
	}
 8002076:	4618      	mov	r0, r3
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b088      	sub	sp, #32
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <prvInitialiseNewTask+0x28>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e7fe      	b.n	80020a4 <prvInitialiseNewTask+0x26>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020b0:	3b01      	subs	r3, #1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	f023 0307 	bic.w	r3, r3, #7
 80020be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <prvInitialiseNewTask+0x60>
 80020ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ce:	f383 8811 	msr	BASEPRI, r3
 80020d2:	f3bf 8f6f 	isb	sy
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e7fe      	b.n	80020dc <prvInitialiseNewTask+0x5e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e012      	b.n	800210a <prvInitialiseNewTask+0x8c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	3334      	adds	r3, #52	; 0x34
 80020f4:	460a      	mov	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <prvInitialiseNewTask+0x94>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d9e9      	bls.n	80020e4 <prvInitialiseNewTask+0x66>
 8002110:	e000      	b.n	8002114 <prvInitialiseNewTask+0x96>
		{
			break;
 8002112:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	2b04      	cmp	r3, #4
 8002120:	d901      	bls.n	8002126 <prvInitialiseNewTask+0xa8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002122:	2304      	movs	r3, #4
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	3304      	adds	r3, #4
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe98 	bl	8000e72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	3318      	adds	r3, #24
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fe93 	bl	8000e72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002150:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	f1c3 0205 	rsb	r2, r3, #5
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	2200      	movs	r2, #0
 8002166:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	69b8      	ldr	r0, [r7, #24]
 8002176:	f7fe fc25 	bl	80009c4 <pxPortInitialiseStack>
 800217a:	4602      	mov	r2, r0
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800218a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800219c:	f7fe fcfc 	bl	8000b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <prvAddNewTaskToReadyList+0xb8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <prvAddNewTaskToReadyList+0xb8>)
 80021a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <prvAddNewTaskToReadyList+0xbc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80021b2:	4a27      	ldr	r2, [pc, #156]	; (8002250 <prvAddNewTaskToReadyList+0xbc>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <prvAddNewTaskToReadyList+0xb8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d110      	bne.n	80021e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80021c0:	f000 fc24 	bl	8002a0c <prvInitialiseTaskLists>
 80021c4:	e00d      	b.n	80021e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80021c6:	4b23      	ldr	r3, [pc, #140]	; (8002254 <prvAddNewTaskToReadyList+0xc0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <prvAddNewTaskToReadyList+0xbc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	429a      	cmp	r2, r3
 80021da:	d802      	bhi.n	80021e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <prvAddNewTaskToReadyList+0xbc>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <prvAddNewTaskToReadyList+0xc4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <prvAddNewTaskToReadyList+0xc4>)
 80021ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <prvAddNewTaskToReadyList+0xc8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <prvAddNewTaskToReadyList+0xc8>)
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <prvAddNewTaskToReadyList+0xcc>)
 800220c:	441a      	add	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7fe fe38 	bl	8000e8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800221a:	f7fe fceb 	bl	8000bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <prvAddNewTaskToReadyList+0xc0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00e      	beq.n	8002244 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <prvAddNewTaskToReadyList+0xbc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <prvAddNewTaskToReadyList+0xd0>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20001d94 	.word	0x20001d94
 8002250:	20001cbc 	.word	0x20001cbc
 8002254:	20001da0 	.word	0x20001da0
 8002258:	20001db0 	.word	0x20001db0
 800225c:	20001d9c 	.word	0x20001d9c
 8002260:	20001cc0 	.word	0x20001cc0
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <vTaskDelay+0x60>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <vTaskDelay+0x2e>
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	e7fe      	b.n	8002294 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002296:	f000 f867 	bl	8002368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fe33 	bl	8002f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022a2:	f000 f86f 	bl	8002384 <xTaskResumeAll>
 80022a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <vTaskDelay+0x64>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20001dbc 	.word	0x20001dbc
 80022cc:	e000ed04 	.word	0xe000ed04

080022d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <vTaskStartScheduler+0x80>)
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2300      	movs	r3, #0
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2246      	movs	r2, #70	; 0x46
 80022e2:	491c      	ldr	r1, [pc, #112]	; (8002354 <vTaskStartScheduler+0x84>)
 80022e4:	481c      	ldr	r0, [pc, #112]	; (8002358 <vTaskStartScheduler+0x88>)
 80022e6:	f7ff fe89 	bl	8001ffc <xTaskCreate>
 80022ea:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80022f2:	f000 fe6f 	bl	8002fd4 <xTimerCreateTimerTask>
 80022f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d115      	bne.n	800232a <vTaskStartScheduler+0x5a>
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <vTaskStartScheduler+0x8c>)
 8002312:	f04f 32ff 	mov.w	r2, #4294967295
 8002316:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <vTaskStartScheduler+0x90>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <vTaskStartScheduler+0x94>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002324:	f7fe fbc8 	bl	8000ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002328:	e00d      	b.n	8002346 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d109      	bne.n	8002346 <vTaskStartScheduler+0x76>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	e7fe      	b.n	8002344 <vTaskStartScheduler+0x74>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20001db8 	.word	0x20001db8
 8002354:	0800434c 	.word	0x0800434c
 8002358:	080029dd 	.word	0x080029dd
 800235c:	20001db4 	.word	0x20001db4
 8002360:	20001da0 	.word	0x20001da0
 8002364:	20001d98 	.word	0x20001d98

08002368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <vTaskSuspendAll+0x18>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a03      	ldr	r2, [pc, #12]	; (8002380 <vTaskSuspendAll+0x18>)
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20001dbc 	.word	0x20001dbc

08002384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <xTaskResumeAll+0x114>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <xTaskResumeAll+0x2a>
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	e7fe      	b.n	80023ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80023ae:	f7fe fbf3 	bl	8000b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <xTaskResumeAll+0x114>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	4a37      	ldr	r2, [pc, #220]	; (8002498 <xTaskResumeAll+0x114>)
 80023ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <xTaskResumeAll+0x114>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d161      	bne.n	8002488 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <xTaskResumeAll+0x118>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05d      	beq.n	8002488 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023cc:	e02e      	b.n	800242c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <xTaskResumeAll+0x11c>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3318      	adds	r3, #24
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fdb0 	bl	8000f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fdab 	bl	8000f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	2201      	movs	r2, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <xTaskResumeAll+0x120>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <xTaskResumeAll+0x120>)
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <xTaskResumeAll+0x124>)
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7fe fd39 	bl	8000e8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <xTaskResumeAll+0x128>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <xTaskResumeAll+0x12c>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <xTaskResumeAll+0x11c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1cc      	bne.n	80023ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800243a:	f000 fb63 	bl	8002b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <xTaskResumeAll+0x130>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800244a:	f000 f845 	bl	80024d8 <xTaskIncrementTick>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <xTaskResumeAll+0x12c>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3b01      	subs	r3, #1
 800245e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f1      	bne.n	800244a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <xTaskResumeAll+0x130>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <xTaskResumeAll+0x12c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <xTaskResumeAll+0x134>)
 800247a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002488:	f7fe fbb4 	bl	8000bf4 <vPortExitCritical>

	return xAlreadyYielded;
 800248c:	68bb      	ldr	r3, [r7, #8]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20001dbc 	.word	0x20001dbc
 800249c:	20001d94 	.word	0x20001d94
 80024a0:	20001d54 	.word	0x20001d54
 80024a4:	20001d9c 	.word	0x20001d9c
 80024a8:	20001cc0 	.word	0x20001cc0
 80024ac:	20001cbc 	.word	0x20001cbc
 80024b0:	20001da8 	.word	0x20001da8
 80024b4:	20001da4 	.word	0x20001da4
 80024b8:	e000ed04 	.word	0xe000ed04

080024bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <xTaskGetTickCount+0x18>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80024c8:	687b      	ldr	r3, [r7, #4]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	20001d98 	.word	0x20001d98

080024d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e2:	4b52      	ldr	r3, [pc, #328]	; (800262c <xTaskIncrementTick+0x154>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 808d 	bne.w	8002606 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <xTaskIncrementTick+0x158>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <xTaskIncrementTick+0x158>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11f      	bne.n	8002540 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <xTaskIncrementTick+0x15c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <xTaskIncrementTick+0x46>
 800250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250e:	f383 8811 	msr	BASEPRI, r3
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	e7fe      	b.n	800251c <xTaskIncrementTick+0x44>
 800251e:	4b45      	ldr	r3, [pc, #276]	; (8002634 <xTaskIncrementTick+0x15c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <xTaskIncrementTick+0x160>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <xTaskIncrementTick+0x15c>)
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <xTaskIncrementTick+0x160>)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <xTaskIncrementTick+0x164>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a40      	ldr	r2, [pc, #256]	; (800263c <xTaskIncrementTick+0x164>)
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	f000 fae2 	bl	8002b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <xTaskIncrementTick+0x168>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	429a      	cmp	r2, r3
 8002548:	d348      	bcc.n	80025dc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <xTaskIncrementTick+0x15c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <xTaskIncrementTick+0x168>)
 8002556:	f04f 32ff 	mov.w	r2, #4294967295
 800255a:	601a      	str	r2, [r3, #0]
					break;
 800255c:	e03e      	b.n	80025dc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <xTaskIncrementTick+0x15c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d203      	bcs.n	800257e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <xTaskIncrementTick+0x168>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800257c:	e02e      	b.n	80025dc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3304      	adds	r3, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fcdc 	bl	8000f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3318      	adds	r3, #24
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fcd3 	bl	8000f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	2201      	movs	r2, #1
 80025a0:	409a      	lsls	r2, r3
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <xTaskIncrementTick+0x16c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <xTaskIncrementTick+0x16c>)
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <xTaskIncrementTick+0x170>)
 80025ba:	441a      	add	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3304      	adds	r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fc61 	bl	8000e8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <xTaskIncrementTick+0x174>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d3b9      	bcc.n	800254a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025da:	e7b6      	b.n	800254a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <xTaskIncrementTick+0x174>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	4919      	ldr	r1, [pc, #100]	; (8002648 <xTaskIncrementTick+0x170>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d901      	bls.n	80025f8 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <xTaskIncrementTick+0x178>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <xTaskIncrementTick+0x13c>
			{
				vApplicationTickHook();
 8002600:	f001 f82d 	bl	800365e <vApplicationTickHook>
 8002604:	e006      	b.n	8002614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <xTaskIncrementTick+0x178>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <xTaskIncrementTick+0x178>)
 800260e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8002610:	f001 f825 	bl	800365e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <xTaskIncrementTick+0x17c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800261c:	2301      	movs	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002620:	697b      	ldr	r3, [r7, #20]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20001dbc 	.word	0x20001dbc
 8002630:	20001d98 	.word	0x20001d98
 8002634:	20001d4c 	.word	0x20001d4c
 8002638:	20001d50 	.word	0x20001d50
 800263c:	20001dac 	.word	0x20001dac
 8002640:	20001db4 	.word	0x20001db4
 8002644:	20001d9c 	.word	0x20001d9c
 8002648:	20001cc0 	.word	0x20001cc0
 800264c:	20001cbc 	.word	0x20001cbc
 8002650:	20001da4 	.word	0x20001da4
 8002654:	20001da8 	.word	0x20001da8

08002658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <vTaskSwitchContext+0xc0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <vTaskSwitchContext+0xc4>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800266c:	e04f      	b.n	800270e <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <vTaskSwitchContext+0xc4>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <vTaskSwitchContext+0xc8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <vTaskSwitchContext+0xc8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	429a      	cmp	r2, r3
 8002682:	d808      	bhi.n	8002696 <vTaskSwitchContext+0x3e>
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <vTaskSwitchContext+0xc8>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <vTaskSwitchContext+0xc8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3334      	adds	r3, #52	; 0x34
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f000 ffdb 	bl	800364c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <vTaskSwitchContext+0xcc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	f1c3 031f 	rsb	r3, r3, #31
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	491e      	ldr	r1, [pc, #120]	; (8002728 <vTaskSwitchContext+0xd0>)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <vTaskSwitchContext+0x7c>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	e7fe      	b.n	80026d2 <vTaskSwitchContext+0x7a>
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <vTaskSwitchContext+0xd0>)
 80026e0:	4413      	add	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3308      	adds	r3, #8
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d104      	bne.n	8002704 <vTaskSwitchContext+0xac>
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <vTaskSwitchContext+0xc8>)
 800270c:	6013      	str	r3, [r2, #0]
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20001dbc 	.word	0x20001dbc
 800271c:	20001da8 	.word	0x20001da8
 8002720:	20001cbc 	.word	0x20001cbc
 8002724:	20001d9c 	.word	0x20001d9c
 8002728:	20001cc0 	.word	0x20001cc0

0800272c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <vTaskPlaceOnEventList+0x24>
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e7fe      	b.n	800274e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <vTaskPlaceOnEventList+0x44>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3318      	adds	r3, #24
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7fe fbb9 	bl	8000ed0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800275e:	2101      	movs	r1, #1
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f000 fbd1 	bl	8002f08 <prvAddCurrentTaskToDelayedList>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20001cbc 	.word	0x20001cbc

08002774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <vTaskPlaceOnEventListRestricted+0x26>
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e7fe      	b.n	8002798 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3318      	adds	r3, #24
 80027a0:	4619      	mov	r1, r3
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7fe fb71 	bl	8000e8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	68b8      	ldr	r0, [r7, #8]
 80027b8:	f000 fba6 	bl	8002f08 <prvAddCurrentTaskToDelayedList>
	}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20001cbc 	.word	0x20001cbc

080027c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <xTaskRemoveFromEventList+0x2a>
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e7fe      	b.n	80027f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	3318      	adds	r3, #24
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fba2 	bl	8000f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <xTaskRemoveFromEventList+0xac>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11c      	bne.n	800283e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	3304      	adds	r3, #4
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fb99 	bl	8000f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <xTaskRemoveFromEventList+0xb0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	4a16      	ldr	r2, [pc, #88]	; (8002878 <xTaskRemoveFromEventList+0xb0>)
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <xTaskRemoveFromEventList+0xb4>)
 800282e:	441a      	add	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	3304      	adds	r3, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f7fe fb27 	bl	8000e8a <vListInsertEnd>
 800283c:	e005      	b.n	800284a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3318      	adds	r3, #24
 8002842:	4619      	mov	r1, r3
 8002844:	480e      	ldr	r0, [pc, #56]	; (8002880 <xTaskRemoveFromEventList+0xb8>)
 8002846:	f7fe fb20 	bl	8000e8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <xTaskRemoveFromEventList+0xbc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <xTaskRemoveFromEventList+0xc0>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e001      	b.n	8002868 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002868:	697b      	ldr	r3, [r7, #20]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20001dbc 	.word	0x20001dbc
 8002878:	20001d9c 	.word	0x20001d9c
 800287c:	20001cc0 	.word	0x20001cc0
 8002880:	20001d54 	.word	0x20001d54
 8002884:	20001cbc 	.word	0x20001cbc
 8002888:	20001da8 	.word	0x20001da8

0800288c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <vTaskSetTimeOutState+0x22>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e7fe      	b.n	80028ac <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 80028ae:	f7fe f973 	bl	8000b98 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <vTaskSetTimeOutState+0x44>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <vTaskSetTimeOutState+0x48>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80028c2:	f7fe f997 	bl	8000bf4 <vPortExitCritical>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20001dac 	.word	0x20001dac
 80028d4:	20001d98 	.word	0x20001d98

080028d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <vTaskInternalSetTimeOutState+0x24>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <vTaskInternalSetTimeOutState+0x28>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20001dac 	.word	0x20001dac
 8002900:	20001d98 	.word	0x20001d98

08002904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <xTaskCheckForTimeOut+0x24>
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e7fe      	b.n	8002926 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <xTaskCheckForTimeOut+0x3e>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e7fe      	b.n	8002940 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002942:	f7fe f929 	bl	8000b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <xTaskCheckForTimeOut+0xb8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d102      	bne.n	8002966 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e023      	b.n	80029ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <xTaskCheckForTimeOut+0xbc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d007      	beq.n	8002982 <xTaskCheckForTimeOut+0x7e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	429a      	cmp	r2, r3
 800297a:	d802      	bhi.n	8002982 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800297c:	2301      	movs	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e015      	b.n	80029ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d90b      	bls.n	80029a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff9d 	bl	80028d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e004      	b.n	80029ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80029ae:	f7fe f921 	bl	8000bf4 <vPortExitCritical>

	return xReturn;
 80029b2:	69fb      	ldr	r3, [r7, #28]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20001d98 	.word	0x20001d98
 80029c0:	20001dac 	.word	0x20001dac

080029c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <vTaskMissedYield+0x14>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20001da8 	.word	0x20001da8

080029dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029e4:	f000 f852 	bl	8002a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <prvIdleTask+0x28>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d9f9      	bls.n	80029e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <prvIdleTask+0x2c>)
 80029f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a00:	e7f0      	b.n	80029e4 <prvIdleTask+0x8>
 8002a02:	bf00      	nop
 8002a04:	20001cc0 	.word	0x20001cc0
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	e00c      	b.n	8002a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <prvInitialiseTaskLists+0x60>)
 8002a24:	4413      	add	r3, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa04 	bl	8000e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d9ef      	bls.n	8002a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <prvInitialiseTaskLists+0x64>)
 8002a3a:	f7fe f9fb 	bl	8000e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <prvInitialiseTaskLists+0x68>)
 8002a40:	f7fe f9f8 	bl	8000e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <prvInitialiseTaskLists+0x6c>)
 8002a46:	f7fe f9f5 	bl	8000e34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <prvInitialiseTaskLists+0x70>)
 8002a4c:	f7fe f9f2 	bl	8000e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <prvInitialiseTaskLists+0x74>)
 8002a52:	f7fe f9ef 	bl	8000e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <prvInitialiseTaskLists+0x78>)
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <prvInitialiseTaskLists+0x64>)
 8002a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <prvInitialiseTaskLists+0x7c>)
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <prvInitialiseTaskLists+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20001cc0 	.word	0x20001cc0
 8002a70:	20001d24 	.word	0x20001d24
 8002a74:	20001d38 	.word	0x20001d38
 8002a78:	20001d54 	.word	0x20001d54
 8002a7c:	20001d68 	.word	0x20001d68
 8002a80:	20001d80 	.word	0x20001d80
 8002a84:	20001d4c 	.word	0x20001d4c
 8002a88:	20001d50 	.word	0x20001d50

08002a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a92:	e019      	b.n	8002ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a94:	f7fe f880 	bl	8000b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <prvCheckTasksWaitingTermination+0x4c>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fa4b 	bl	8000f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <prvCheckTasksWaitingTermination+0x50>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <prvCheckTasksWaitingTermination+0x50>)
 8002ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <prvCheckTasksWaitingTermination+0x54>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <prvCheckTasksWaitingTermination+0x54>)
 8002abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002abe:	f7fe f899 	bl	8000bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f80e 	bl	8002ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <prvCheckTasksWaitingTermination+0x54>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e1      	bne.n	8002a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20001d68 	.word	0x20001d68
 8002adc:	20001d94 	.word	0x20001d94
 8002ae0:	20001d7c 	.word	0x20001d7c

08002ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe f989 	bl	8000e08 <vPortFree>
			vPortFree( pxTCB );
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe f986 	bl	8000e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <prvResetNextTaskUnblockTime+0x38>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <prvResetNextTaskUnblockTime+0x3c>)
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b1c:	e008      	b.n	8002b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <prvResetNextTaskUnblockTime+0x38>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <prvResetNextTaskUnblockTime+0x3c>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20001d4c 	.word	0x20001d4c
 8002b40:	20001db4 	.word	0x20001db4

08002b44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <xTaskGetCurrentTaskHandle+0x18>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002b50:	687b      	ldr	r3, [r7, #4]
	}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	20001cbc 	.word	0x20001cbc

08002b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <xTaskGetSchedulerState+0x34>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	e008      	b.n	8002b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <xTaskGetSchedulerState+0x38>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	e001      	b.n	8002b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002b86:	687b      	ldr	r3, [r7, #4]
	}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20001da0 	.word	0x20001da0
 8002b98:	20001dbc 	.word	0x20001dbc

08002b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d06c      	beq.n	8002c8c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <xTaskPriorityDisinherit+0xfc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d009      	beq.n	8002bd0 <xTaskPriorityDisinherit+0x34>
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e7fe      	b.n	8002bce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <xTaskPriorityDisinherit+0x50>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	e7fe      	b.n	8002bea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	1e5a      	subs	r2, r3, #1
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d044      	beq.n	8002c8c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d140      	bne.n	8002c8c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f996 	bl	8000f40 <uxListRemove>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d115      	bne.n	8002c46 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	491f      	ldr	r1, [pc, #124]	; (8002c9c <xTaskPriorityDisinherit+0x100>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xTaskPriorityDisinherit+0xaa>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	2201      	movs	r2, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <xTaskPriorityDisinherit+0x104>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4013      	ands	r3, r2
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <xTaskPriorityDisinherit+0x104>)
 8002c44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	f1c3 0205 	rsb	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	2201      	movs	r2, #1
 8002c60:	409a      	lsls	r2, r3
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <xTaskPriorityDisinherit+0x104>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <xTaskPriorityDisinherit+0x104>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <xTaskPriorityDisinherit+0x100>)
 8002c7a:	441a      	add	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f7fe f901 	bl	8000e8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002c8c:	697b      	ldr	r3, [r7, #20]
	}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001cbc 	.word	0x20001cbc
 8002c9c:	20001cc0 	.word	0x20001cc0
 8002ca0:	20001d9c 	.word	0x20001d9c

08002ca4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002cb2:	f7fd ff71 	bl	8000b98 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d01a      	beq.n	8002cfa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	43d2      	mvns	r2, r2
 8002cce:	400a      	ands	r2, r1
 8002cd0:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	6838      	ldr	r0, [r7, #0]
 8002ce6:	f000 f90f 	bl	8002f08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <xTaskNotifyWait+0xb0>)
 8002cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002cfa:	f7fd ff7b 	bl	8000bf4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002cfe:	f7fd ff4b 	bl	8000b98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d002      	beq.n	8002d26 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e008      	b.n	8002d38 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	43d2      	mvns	r2, r2
 8002d30:	400a      	ands	r2, r1
 8002d32:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <xTaskNotifyWait+0xac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8002d42:	f7fd ff57 	bl	8000bf4 <vPortExitCritical>

		return xReturn;
 8002d46:	697b      	ldr	r3, [r7, #20]
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20001cbc 	.word	0x20001cbc
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <xTaskGenericNotify+0x2e>
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e7fe      	b.n	8002d84 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8002d8a:	f7fd ff05 	bl	8000b98 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002da2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d827      	bhi.n	8002e02 <xTaskGenericNotify+0xaa>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <xTaskGenericNotify+0x60>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002e21 	.word	0x08002e21
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002ddb 	.word	0x08002ddb
 8002dc4:	08002de7 	.word	0x08002de7
 8002dc8:	08002def 	.word	0x08002def
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8002dd8:	e025      	b.n	8002e26 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8002de4:	e01f      	b.n	8002e26 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8002dec:	e01b      	b.n	8002e26 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d003      	beq.n	8002dfc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002dfa:	e014      	b.n	8002e26 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002e00:	e011      	b.n	8002e26 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d00b      	beq.n	8002e24 <xTaskGenericNotify+0xcc>
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e7fe      	b.n	8002e1e <xTaskGenericNotify+0xc6>
					break;
 8002e20:	bf00      	nop
 8002e22:	e000      	b.n	8002e26 <xTaskGenericNotify+0xce>

					break;
 8002e24:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d138      	bne.n	8002e9e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f885 	bl	8000f40 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <xTaskGenericNotify+0x154>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <xTaskGenericNotify+0x154>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <xTaskGenericNotify+0x158>)
 8002e56:	441a      	add	r2, r3
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7fe f813 	bl	8000e8a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d009      	beq.n	8002e80 <xTaskGenericNotify+0x128>
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e7fe      	b.n	8002e7e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <xTaskGenericNotify+0x15c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d907      	bls.n	8002e9e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <xTaskGenericNotify+0x160>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002e9e:	f7fd fea9 	bl	8000bf4 <vPortExitCritical>

		return xReturn;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3728      	adds	r7, #40	; 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20001d9c 	.word	0x20001d9c
 8002eb0:	20001cc0 	.word	0x20001cc0
 8002eb4:	20001cbc 	.word	0x20001cbc
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <xTaskNotifyStateClear+0x14>
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <xTaskNotifyStateClear+0x48>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <xTaskNotifyStateClear+0x16>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8002ed4:	f7fd fe60 	bl	8000b98 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d106      	bne.n	8002ef2 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				xReturn = pdPASS;
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002ef6:	f7fd fe7d 	bl	8000bf4 <vPortExitCritical>

		return xReturn;
 8002efa:	68fb      	ldr	r3, [r7, #12]
	}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20001cbc 	.word	0x20001cbc

08002f08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f80e 	bl	8000f40 <uxListRemove>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2201      	movs	r2, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d10a      	bne.n	8002f60 <prvAddCurrentTaskToDelayedList+0x58>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	481a      	ldr	r0, [pc, #104]	; (8002fc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f5a:	f7fd ff96 	bl	8000e8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f5e:	e026      	b.n	8002fae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d209      	bcs.n	8002f8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7fd ffa3 	bl	8000ed0 <vListInsert>
}
 8002f8a:	e010      	b.n	8002fae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fd ff99 	bl	8000ed0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d202      	bcs.n	8002fae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002fa8:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6013      	str	r3, [r2, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20001d98 	.word	0x20001d98
 8002fbc:	20001cbc 	.word	0x20001cbc
 8002fc0:	20001d9c 	.word	0x20001d9c
 8002fc4:	20001d80 	.word	0x20001d80
 8002fc8:	20001d50 	.word	0x20001d50
 8002fcc:	20001d4c 	.word	0x20001d4c
 8002fd0:	20001db4 	.word	0x20001db4

08002fd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002fde:	f000 fa8b 	bl	80034f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <xTimerCreateTimerTask+0x50>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <xTimerCreateTimerTask+0x54>)
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2303      	movs	r3, #3
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2246      	movs	r2, #70	; 0x46
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <xTimerCreateTimerTask+0x58>)
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <xTimerCreateTimerTask+0x5c>)
 8002ffa:	f7fe ffff 	bl	8001ffc <xTaskCreate>
 8002ffe:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <xTimerCreateTimerTask+0x46>
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	e7fe      	b.n	8003018 <xTimerCreateTimerTask+0x44>
	return xReturn;
 800301a:	687b      	ldr	r3, [r7, #4]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20001df0 	.word	0x20001df0
 8003028:	20001df4 	.word	0x20001df4
 800302c:	08004354 	.word	0x08004354
 8003030:	0800314d 	.word	0x0800314d

08003034 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <xTimerGenericCommand+0x2c>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	e7fe      	b.n	800305e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <xTimerGenericCommand+0x94>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02a      	beq.n	80030be <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	dc18      	bgt.n	80030ac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800307a:	f7ff fd71 	bl	8002b60 <xTaskGetSchedulerState>
 800307e:	4603      	mov	r3, r0
 8003080:	2b02      	cmp	r3, #2
 8003082:	d109      	bne.n	8003098 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <xTimerGenericCommand+0x94>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f107 0114 	add.w	r1, r7, #20
 800308c:	2300      	movs	r3, #0
 800308e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003090:	f7fe f842 	bl	8001118 <xQueueGenericSend>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24
 8003096:	e012      	b.n	80030be <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <xTimerGenericCommand+0x94>)
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	f107 0114 	add.w	r1, r7, #20
 80030a0:	2300      	movs	r3, #0
 80030a2:	2200      	movs	r2, #0
 80030a4:	f7fe f838 	bl	8001118 <xQueueGenericSend>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24
 80030aa:	e008      	b.n	80030be <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <xTimerGenericCommand+0x94>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	f107 0114 	add.w	r1, r7, #20
 80030b4:	2300      	movs	r3, #0
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	f7fe f928 	bl	800130c <xQueueGenericSendFromISR>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20001df0 	.word	0x20001df0

080030cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <prvProcessExpiredTimer+0x7c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd ff2b 	bl	8000f40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d121      	bne.n	8003136 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	18d1      	adds	r1, r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f000 f8c6 	bl	8003290 <prvInsertTimerInActiveList>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	2100      	movs	r1, #0
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f7ff ff8d 	bl	8003034 <xTimerGenericCommand>
 800311a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <prvProcessExpiredTimer+0x6a>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e7fe      	b.n	8003134 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	4798      	blx	r3
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001de8 	.word	0x20001de8

0800314c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f857 	bl	800320c <prvGetNextExpireTime>
 800315e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4619      	mov	r1, r3
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f803 	bl	8003170 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800316a:	f000 f8d3 	bl	8003314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800316e:	e7f1      	b.n	8003154 <prvTimerTask+0x8>

08003170 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800317a:	f7ff f8f5 	bl	8002368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f864 	bl	8003250 <prvSampleTimeNow>
 8003188:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d130      	bne.n	80031f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <prvProcessTimerOrBlockTask+0x3c>
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	429a      	cmp	r2, r3
 800319c:	d806      	bhi.n	80031ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800319e:	f7ff f8f1 	bl	8002384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff91 	bl	80030cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80031aa:	e024      	b.n	80031f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <prvProcessTimerOrBlockTask+0x90>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <prvProcessTimerOrBlockTask+0x50>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <prvProcessTimerOrBlockTask+0x52>
 80031c0:	2300      	movs	r3, #0
 80031c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <prvProcessTimerOrBlockTask+0x94>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fe fb38 	bl	8001846 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80031d6:	f7ff f8d5 	bl	8002384 <xTaskResumeAll>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <prvProcessTimerOrBlockTask+0x98>)
 80031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
}
 80031f0:	e001      	b.n	80031f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80031f2:	f7ff f8c7 	bl	8002384 <xTaskResumeAll>
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20001dec 	.word	0x20001dec
 8003204:	20001df0 	.word	0x20001df0
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <prvGetNextExpireTime+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <prvGetNextExpireTime+0x16>
 800321e:	2201      	movs	r2, #1
 8003220:	e000      	b.n	8003224 <prvGetNextExpireTime+0x18>
 8003222:	2200      	movs	r2, #0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <prvGetNextExpireTime+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e001      	b.n	8003240 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003240:	68fb      	ldr	r3, [r7, #12]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	20001de8 	.word	0x20001de8

08003250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003258:	f7ff f930 	bl	80024bc <xTaskGetTickCount>
 800325c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <prvSampleTimeNow+0x3c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d205      	bcs.n	8003274 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003268:	f000 f8e6 	bl	8003438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e002      	b.n	800327a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800327a:	4a04      	ldr	r2, [pc, #16]	; (800328c <prvSampleTimeNow+0x3c>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003280:	68fb      	ldr	r3, [r7, #12]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20001df8 	.word	0x20001df8

08003290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d812      	bhi.n	80032dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad2      	subs	r2, r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e01b      	b.n	8003302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <prvInsertTimerInActiveList+0x7c>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fd fdfb 	bl	8000ed0 <vListInsert>
 80032da:	e012      	b.n	8003302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d206      	bcs.n	80032f2 <prvInsertTimerInActiveList+0x62>
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e007      	b.n	8003302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <prvInsertTimerInActiveList+0x80>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7fd fde7 	bl	8000ed0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003302:	697b      	ldr	r3, [r7, #20]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20001dec 	.word	0x20001dec
 8003310:	20001de8 	.word	0x20001de8

08003314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800331a:	e07a      	b.n	8003412 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db77      	blt.n	8003412 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fe04 	bl	8000f40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff88 	bl	8003250 <prvSampleTimeNow>
 8003340:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b09      	cmp	r3, #9
 8003346:	d863      	bhi.n	8003410 <prvProcessReceivedCommands+0xfc>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <prvProcessReceivedCommands+0x3c>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003379 	.word	0x08003379
 8003354:	08003379 	.word	0x08003379
 8003358:	08003379 	.word	0x08003379
 800335c:	08003413 	.word	0x08003413
 8003360:	080033d3 	.word	0x080033d3
 8003364:	08003409 	.word	0x08003409
 8003368:	08003379 	.word	0x08003379
 800336c:	08003379 	.word	0x08003379
 8003370:	08003413 	.word	0x08003413
 8003374:	080033d3 	.word	0x080033d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	18d1      	adds	r1, r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003386:	f7ff ff83 	bl	8003290 <prvInsertTimerInActiveList>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d040      	beq.n	8003412 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003396:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d138      	bne.n	8003412 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	441a      	add	r2, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2300      	movs	r3, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033b2:	f7ff fe3f 	bl	8003034 <xTimerGenericCommand>
 80033b6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d129      	bne.n	8003412 <prvProcessReceivedCommands+0xfe>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e7fe      	b.n	80033d0 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <prvProcessReceivedCommands+0xe0>
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e7fe      	b.n	80033f2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	18d1      	adds	r1, r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	6a3a      	ldr	r2, [r7, #32]
 8003400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003402:	f7ff ff45 	bl	8003290 <prvInsertTimerInActiveList>
					break;
 8003406:	e004      	b.n	8003412 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800340a:	f7fd fcfd 	bl	8000e08 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800340e:	e000      	b.n	8003412 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8003410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <prvProcessReceivedCommands+0x120>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f107 0108 	add.w	r1, r7, #8
 800341a:	2200      	movs	r2, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe f809 	bl	8001434 <xQueueReceive>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f af79 	bne.w	800331c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800342a:	bf00      	nop
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20001df0 	.word	0x20001df0

08003438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800343e:	e044      	b.n	80034ca <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fd71 	bl	8000f40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	6938      	ldr	r0, [r7, #16]
 8003464:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d12d      	bne.n	80034ca <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d90e      	bls.n	800349e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f7fd fd1a 	bl	8000ed0 <vListInsert>
 800349c:	e015      	b.n	80034ca <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	2100      	movs	r1, #0
 80034a8:	6938      	ldr	r0, [r7, #16]
 80034aa:	f7ff fdc3 	bl	8003034 <xTimerGenericCommand>
 80034ae:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <prvSwitchTimerLists+0x92>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	e7fe      	b.n	80034c8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1b5      	bne.n	8003440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <prvSwitchTimerLists+0xbc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <prvSwitchTimerLists+0xb8>)
 80034e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <prvSwitchTimerLists+0xbc>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6013      	str	r3, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20001de8 	.word	0x20001de8
 80034f4:	20001dec 	.word	0x20001dec

080034f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80034fc:	f7fd fb4c 	bl	8000b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <prvCheckForValidListAndQueue+0x40>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <prvCheckForValidListAndQueue+0x44>)
 800350a:	f7fd fc93 	bl	8000e34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800350e:	480c      	ldr	r0, [pc, #48]	; (8003540 <prvCheckForValidListAndQueue+0x48>)
 8003510:	f7fd fc90 	bl	8000e34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <prvCheckForValidListAndQueue+0x4c>)
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <prvCheckForValidListAndQueue+0x44>)
 8003518:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <prvCheckForValidListAndQueue+0x50>)
 800351c:	4a08      	ldr	r2, [pc, #32]	; (8003540 <prvCheckForValidListAndQueue+0x48>)
 800351e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003520:	2200      	movs	r2, #0
 8003522:	210c      	movs	r1, #12
 8003524:	2005      	movs	r0, #5
 8003526:	f7fd fd9d 	bl	8001064 <xQueueGenericCreate>
 800352a:	4602      	mov	r2, r0
 800352c:	4b02      	ldr	r3, [pc, #8]	; (8003538 <prvCheckForValidListAndQueue+0x40>)
 800352e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003530:	f7fd fb60 	bl	8000bf4 <vPortExitCritical>
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20001df0 	.word	0x20001df0
 800353c:	20001dc0 	.word	0x20001dc0
 8003540:	20001dd4 	.word	0x20001dd4
 8003544:	20001de8 	.word	0x20001de8
 8003548:	20001dec 	.word	0x20001dec

0800354c <main>:
//static void vTaskSPITxRx(void *pvParameters);

//extern sW5500Config W5500Conf;

int main(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08e      	sub	sp, #56	; 0x38
 8003550:	af02      	add	r7, sp, #8
	CustomInit();
 8003552:	f7fd f9ad 	bl	80008b0 <CustomInit>
	RCC_ClocksTypeDef zegary;
	RCC_GetClocksFreq(&zegary);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4618      	mov	r0, r3
 800355c:	f7fc fff6 	bl	800054c <RCC_GetClocksFreq>

	// relevant for freertos
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8003560:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003564:	f7fc fdf4 	bl	8000150 <NVIC_PriorityGroupConfig>

	// prepare IP config
	uint8_t ipaddr[] 	= {192, 168, 1, 40};
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <main+0xd4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	613b      	str	r3, [r7, #16]
	uint8_t gateway[] 	= {192, 168, 1, 1};
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <main+0xd8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
	uint8_t subnet[]	= {255, 255, 255, 0};
 8003574:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <main+0xdc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60bb      	str	r3, [r7, #8]
	uint8_t mac[]		= {0xBC, 0xE1, 0x43, 0x04, 0xB2, 0x51};
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <main+0xe0>)
 800357c:	463b      	mov	r3, r7
 800357e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003582:	6018      	str	r0, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	8019      	strh	r1, [r3, #0]
	memcpy(W5500Conf.IP, ipaddr, sizeof(ipaddr));
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4a29      	ldr	r2, [pc, #164]	; (8003630 <main+0xe4>)
 800358c:	6013      	str	r3, [r2, #0]
	memcpy(W5500Conf.Gateway, gateway, sizeof(gateway));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <main+0xe4>)
 8003592:	6053      	str	r3, [r2, #4]
	memcpy(W5500Conf.Subnet, subnet, sizeof(subnet));
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a26      	ldr	r2, [pc, #152]	; (8003630 <main+0xe4>)
 8003598:	6093      	str	r3, [r2, #8]
	memcpy(W5500Conf.MAC, mac, sizeof(mac));
 800359a:	4b25      	ldr	r3, [pc, #148]	; (8003630 <main+0xe4>)
 800359c:	330c      	adds	r3, #12
 800359e:	463a      	mov	r2, r7
 80035a0:	6810      	ldr	r0, [r2, #0]
 80035a2:	6018      	str	r0, [r3, #0]
 80035a4:	8892      	ldrh	r2, [r2, #4]
 80035a6:	809a      	strh	r2, [r3, #4]

	// prepare streams and message queue
	StreamBufferHandle_t socket0stream = xStreamBufferCreate(SOCKET_RXBUFFER_LEN, 5);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2105      	movs	r1, #5
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	f7fe f97e 	bl	80018ae <xStreamBufferGenericCreate>
 80035b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(socket0stream == NULL){
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d100      	bne.n	80035bc <main+0x70>
		while(1){}
 80035ba:	e7fe      	b.n	80035ba <main+0x6e>
	}
	QueueHandle_t  w5500controlmessagequeue = xQueueCreate(10, sizeof(sW5500ControlMessage));
 80035bc:	2200      	movs	r2, #0
 80035be:	210c      	movs	r1, #12
 80035c0:	200a      	movs	r0, #10
 80035c2:	f7fd fd4f 	bl	8001064 <xQueueGenericCreate>
 80035c6:	62b8      	str	r0, [r7, #40]	; 0x28
	if(w5500controlmessagequeue == NULL){
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d100      	bne.n	80035d0 <main+0x84>
		while(1){}
 80035ce:	e7fe      	b.n	80035ce <main+0x82>
	}
	// bind it to W5500CB
	W5500CB.Sockets[0].RXStreamHandle = socket0stream;
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <main+0xe8>)
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	60d3      	str	r3, [r2, #12]
	W5500CB.ControlMessageQueue = w5500controlmessagequeue;
 80035d6:	4a17      	ldr	r2, [pc, #92]	; (8003634 <main+0xe8>)
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	6653      	str	r3, [r2, #100]	; 0x64
	// bind it to parser for socket0
	static sParserInOutParameter parser0params;
	parser0params.inputStream = W5500CB.Sockets[0].RXStreamHandle;
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <main+0xe8>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <main+0xec>)
 80035e2:	6013      	str	r3, [r2, #0]
	parser0params.outputMessageQueue = W5500CB.ControlMessageQueue;
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <main+0xe8>)
 80035e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <main+0xec>)
 80035ea:	6053      	str	r3, [r2, #4]
	parser0params.sourceSocketNo = 0;
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <main+0xec>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	721a      	strb	r2, [r3, #8]

	//xTaskCreate(vTaskSPITxRx, (unsigned char*)"spi", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	xTaskCreate(vTaskW5500, (const char*)"w5500", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80035f2:	2300      	movs	r3, #0
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2304      	movs	r3, #4
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	2246      	movs	r2, #70	; 0x46
 80035fe:	490f      	ldr	r1, [pc, #60]	; (800363c <main+0xf0>)
 8003600:	480f      	ldr	r0, [pc, #60]	; (8003640 <main+0xf4>)
 8003602:	f7fe fcfb 	bl	8001ffc <xTaskCreate>
	xTaskCreate(vTaskMBParser, (const char*)"MBp", configMINIMAL_STACK_SIZE, &parser0params, 3, NULL);
 8003606:	2300      	movs	r3, #0
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2303      	movs	r3, #3
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <main+0xec>)
 8003610:	2246      	movs	r2, #70	; 0x46
 8003612:	490c      	ldr	r1, [pc, #48]	; (8003644 <main+0xf8>)
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <main+0xfc>)
 8003616:	f7fe fcf1 	bl	8001ffc <xTaskCreate>

	vTaskStartScheduler();
 800361a:	f7fe fe59 	bl	80022d0 <vTaskStartScheduler>

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 800361e:	e7fe      	b.n	800361e <main+0xd2>
 8003620:	08004368 	.word	0x08004368
 8003624:	0800436c 	.word	0x0800436c
 8003628:	08004370 	.word	0x08004370
 800362c:	08004374 	.word	0x08004374
 8003630:	20001f10 	.word	0x20001f10
 8003634:	20001e34 	.word	0x20001e34
 8003638:	20001dfc 	.word	0x20001dfc
 800363c:	0800435c 	.word	0x0800435c
 8003640:	080037c1 	.word	0x080037c1
 8003644:	08004364 	.word	0x08004364
 8003648:	0800366d 	.word	0x0800366d

0800364c <vApplicationStackOverflowHook>:
		uint8_t rdbuff[] = {7, 8, 9};
		xStreamBufferSend(SPIWriteStreamHandle, &rdbuff, 3, pdMS_TO_TICKS(10));
	}
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ){
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	while(1){}
 8003656:	e7fe      	b.n	8003656 <vApplicationStackOverflowHook+0xa>

08003658 <vApplicationMallocFailedHook>:
}
// Because fuck you! Compiler wants it any way despite it being switched off in FreeRTOSConfig...
void vApplicationMallocFailedHook( void ){
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	while(1){}
 800365c:	e7fe      	b.n	800365c <vApplicationMallocFailedHook+0x4>

0800365e <vApplicationTickHook>:
}
void vApplicationIdleHook(void){}

void vApplicationTickHook(void){}
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
	...

0800366c <vTaskMBParser>:

#include "TaskMBParser.h"



void vTaskMBParser(void *pvParameters){
 800366c:	b580      	push	{r7, lr}
 800366e:	b092      	sub	sp, #72	; 0x48
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	// assign input stream buffer
	sParserInOutParameter *params;
	params = (sParserInOutParameter*)pvParameters;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
	StreamBufferHandle_t inputStreamHandle = params->inputStream;
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
	QueueHandle_t outputMessageQueueHandle = params->outputMessageQueue;
 800367e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t sourceSocket = params->sourceSocketNo;
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	7a1b      	ldrb	r3, [r3, #8]
 8003688:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	while(1){
		uint8_t buff[20];
		memset(buff, 0, 20);
 800368c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003690:	2214      	movs	r2, #20
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fd7a 	bl	800418e <memset>
		uint16_t received_len = xStreamBufferReceive(inputStreamHandle, buff, 20, portMAX_DELAY);
 800369a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	2214      	movs	r2, #20
 80036a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80036a6:	f7fe faae 	bl	8001c06 <xStreamBufferReceive>
 80036aa:	4603      	mov	r3, r0
 80036ac:	873b      	strh	r3, [r7, #56]	; 0x38

		// answer...
		sW5500ControlMessage replymsg;
		replymsg.MessageType = W5500_MESSAGE_SEND;
 80036ae:	2301      	movs	r3, #1
 80036b0:	763b      	strb	r3, [r7, #24]
		replymsg.SocketNo = sourceSocket;
 80036b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80036b6:	773b      	strb	r3, [r7, #28]
		char replytxt[] = "dostalem!";
 80036b8:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <vTaskMBParser+0x88>)
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	ca07      	ldmia	r2, {r0, r1, r2}
 80036c0:	c303      	stmia	r3!, {r0, r1}
 80036c2:	801a      	strh	r2, [r3, #0]
		replymsg.DataPointer = malloc(sizeof(replytxt));
 80036c4:	200a      	movs	r0, #10
 80036c6:	f000 fd47 	bl	8004158 <malloc>
 80036ca:	4603      	mov	r3, r0
 80036cc:	623b      	str	r3, [r7, #32]
		memcpy(replymsg.DataPointer, replytxt, sizeof(replytxt));
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	cb03      	ldmia	r3!, {r0, r1}
 80036d8:	6010      	str	r0, [r2, #0]
 80036da:	6051      	str	r1, [r2, #4]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	8113      	strh	r3, [r2, #8]
		replymsg.MessageLength = sizeof(replytxt);
 80036e0:	230a      	movs	r3, #10
 80036e2:	837b      	strh	r3, [r7, #26]

		xQueueSend(outputMessageQueueHandle, &replymsg, pdMS_TO_TICKS(500));
 80036e4:	f107 0118 	add.w	r1, r7, #24
 80036e8:	2300      	movs	r3, #0
 80036ea:	2232      	movs	r2, #50	; 0x32
 80036ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036ee:	f7fd fd13 	bl	8001118 <xQueueGenericSend>
	while(1){
 80036f2:	e7cb      	b.n	800368c <vTaskMBParser+0x20>
 80036f4:	08004380 	.word	0x08004380

080036f8 <W5500_Init>:

#include "TaskW5500.h"



uint8_t W5500_Init(sW5500Config *config){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	W5500CB.ActualState = W5500_INIT;
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <W5500_Init+0xc0>)
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
	W5500CB.ErrorCode = W5500_ERRORCODE_NOERROR;
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <W5500_Init+0xc0>)
 8003708:	2200      	movs	r2, #0
 800370a:	709a      	strb	r2, [r3, #2]
	W5500CB.PhyCfgrStatus = 0;
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <W5500_Init+0xc0>)
 800370e:	2200      	movs	r2, #0
 8003710:	705a      	strb	r2, [r3, #1]
	// 1. HW Reset device for some time
	W5500_RESET_ON;
 8003712:	2102      	movs	r1, #2
 8003714:	4829      	ldr	r0, [pc, #164]	; (80037bc <W5500_Init+0xc4>)
 8003716:	f7fc fe2f 	bl	8000378 <GPIO_ResetBits>
	vTaskDelay(pdMS_TO_TICKS(50));
 800371a:	2005      	movs	r0, #5
 800371c:	f7fe fda4 	bl	8002268 <vTaskDelay>
	W5500_RESET_OFF;
 8003720:	2102      	movs	r1, #2
 8003722:	4826      	ldr	r0, [pc, #152]	; (80037bc <W5500_Init+0xc4>)
 8003724:	f7fc fe1a 	bl	800035c <GPIO_SetBits>
	vTaskDelay(pdMS_TO_TICKS(50));
 8003728:	2005      	movs	r0, #5
 800372a:	f7fe fd9d 	bl	8002268 <vTaskDelay>
	// 2. Verify that actual W5500 is present - check for version register
	uint8_t ucReadValue = W5500_ReadByte(W5500_VERSIONR, COMMON_REGISTER);
 800372e:	2100      	movs	r1, #0
 8003730:	2039      	movs	r0, #57	; 0x39
 8003732:	f000 fbf7 	bl	8003f24 <W5500_ReadByte>
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]
	//W5500_ReadRegisters(W5500_VERSIONR, COMMON_REGISTER, 1, &ucReadValue);
	if(ucReadValue == 0x04){
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d12f      	bne.n	80037a0 <W5500_Init+0xa8>
		// proper VERSIONR value
		// 3. Send IP config values
		// 3.a Send MAC
		W5500_WriteRegisters(W5500_SHAR0, COMMON_REGISTER, 6, config->MAC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	330c      	adds	r3, #12
 8003744:	2206      	movs	r2, #6
 8003746:	2100      	movs	r1, #0
 8003748:	2009      	movs	r0, #9
 800374a:	f000 fc23 	bl	8003f94 <W5500_WriteRegisters>
		// 3.b Send subnet mask
		W5500_WriteRegisters(W5500_SUBR0, COMMON_REGISTER, 4, config->Subnet);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3308      	adds	r3, #8
 8003752:	2204      	movs	r2, #4
 8003754:	2100      	movs	r1, #0
 8003756:	2005      	movs	r0, #5
 8003758:	f000 fc1c 	bl	8003f94 <W5500_WriteRegisters>
		// 3.c Send gateway
		W5500_WriteRegisters(W5500_GAR0, COMMON_REGISTER, 4, config->Gateway);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	2204      	movs	r2, #4
 8003762:	2100      	movs	r1, #0
 8003764:	2001      	movs	r0, #1
 8003766:	f000 fc15 	bl	8003f94 <W5500_WriteRegisters>
		// 3.d Send IP
		W5500_WriteRegisters(W5500_SIPR0, COMMON_REGISTER, 4, config->IP);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	2100      	movs	r1, #0
 8003770:	200f      	movs	r0, #15
 8003772:	f000 fc0f 	bl	8003f94 <W5500_WriteRegisters>
		// 3. Set PHY config and assert SW reset
		//uint8_t phycfgbyte = 0b01111000;
		//W5500_WriteRegisters(W5500_PHYCFGR, COMMON_REGISTER, 1, &phycfgbyte);
		W5500_WriteByte(W5500_PHYCFGR, COMMON_REGISTER, 0b01111000);
 8003776:	2278      	movs	r2, #120	; 0x78
 8003778:	2100      	movs	r1, #0
 800377a:	202e      	movs	r0, #46	; 0x2e
 800377c:	f000 fc76 	bl	800406c <W5500_WriteByte>
		vTaskDelay(pdMS_TO_TICKS(10));
 8003780:	2001      	movs	r0, #1
 8003782:	f7fe fd71 	bl	8002268 <vTaskDelay>
		//phycfgbyte = 0b11111000;
		//W5500_WriteRegisters(W5500_PHYCFGR, COMMON_REGISTER, 1, &phycfgbyte);
		W5500_WriteByte(W5500_PHYCFGR, COMMON_REGISTER, 0b11111000);
 8003786:	22f8      	movs	r2, #248	; 0xf8
 8003788:	2100      	movs	r1, #0
 800378a:	202e      	movs	r0, #46	; 0x2e
 800378c:	f000 fc6e 	bl	800406c <W5500_WriteByte>
		W5500CB.ActualState = W5500_RUN;
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <W5500_Init+0xc0>)
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]
		W5500CB.ErrorCode = W5500_ERRORCODE_NOERROR;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <W5500_Init+0xc0>)
 8003798:	2200      	movs	r2, #0
 800379a:	709a      	strb	r2, [r3, #2]
		return 1;
 800379c:	2301      	movs	r3, #1
 800379e:	e006      	b.n	80037ae <W5500_Init+0xb6>
	}else{
		W5500CB.ActualState = W5500_ERROR;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <W5500_Init+0xc0>)
 80037a2:	2210      	movs	r2, #16
 80037a4:	701a      	strb	r2, [r3, #0]
		W5500CB.ErrorCode = W5500_ERRORCODE_SPIERROR;
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <W5500_Init+0xc0>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	709a      	strb	r2, [r3, #2]
		return 0;
 80037ac:	2300      	movs	r3, #0
	}
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20001e34 	.word	0x20001e34
 80037bc:	40011000 	.word	0x40011000

080037c0 <vTaskW5500>:

void vTaskW5500(void *pvParameters){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	// initial configuration

	// some variables
	uint16_t scratch=0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	81fb      	strh	r3, [r7, #14]

	// device init
	W5500_Init(&W5500Conf);
 80037cc:	4815      	ldr	r0, [pc, #84]	; (8003824 <vTaskW5500+0x64>)
 80037ce:	f7ff ff93 	bl	80036f8 <W5500_Init>
	vTaskDelay(pdMS_TO_TICKS(100));
 80037d2:	200a      	movs	r0, #10
 80037d4:	f7fe fd48 	bl	8002268 <vTaskDelay>
	// If initialization did not succeed, just loop here
	if(W5500CB.ActualState != W5500_RUN){
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <vTaskW5500+0x68>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d000      	beq.n	80037e2 <vTaskW5500+0x22>
		while(1){}
 80037e0:	e7fe      	b.n	80037e0 <vTaskW5500+0x20>
	}

	// config socket
	W5500_SetupTCPSocket(&(W5500CB.Sockets[0]), 0, 502);
 80037e2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80037e6:	2100      	movs	r1, #0
 80037e8:	4810      	ldr	r0, [pc, #64]	; (800382c <vTaskW5500+0x6c>)
 80037ea:	f000 f821 	bl	8003830 <W5500_SetupTCPSocket>


	while(1){
		// check if link is up
		//uint8_t tmp=0;
		W5500CB.PhyCfgrStatus = W5500_ReadByte(W5500_PHYCFGR, COMMON_REGISTER);
 80037ee:	2100      	movs	r1, #0
 80037f0:	202e      	movs	r0, #46	; 0x2e
 80037f2:	f000 fb97 	bl	8003f24 <W5500_ReadByte>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <vTaskW5500+0x68>)
 80037fc:	705a      	strb	r2, [r3, #1]
		//W5500_ReadRegisters(W5500_PHYCFGR, COMMON_REGISTER, 1, &(W5500Status.PhyCfgrStatus));

		if(LINK_IS_UP){
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <vTaskW5500+0x68>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <vTaskW5500+0x56>
			// sockets maintainance
			W5500_ProcessTCPSocket(0);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 f83a 	bl	8003884 <W5500_ProcessTCPSocket>
			W5500_ReadoutTCPSocketToStream(0);
 8003810:	2000      	movs	r0, #0
 8003812:	f000 f899 	bl	8003948 <W5500_ReadoutTCPSocketToStream>
		}else{

		}

		// control messages processing
		W5500_ProcessControlMessages();
 8003816:	f000 f91d 	bl	8003a54 <W5500_ProcessControlMessages>

		// This routine every 50ms
		vTaskDelay(pdMS_TO_TICKS(50));
 800381a:	2005      	movs	r0, #5
 800381c:	f7fe fd24 	bl	8002268 <vTaskDelay>
		W5500CB.PhyCfgrStatus = W5500_ReadByte(W5500_PHYCFGR, COMMON_REGISTER);
 8003820:	e7e5      	b.n	80037ee <vTaskW5500+0x2e>
 8003822:	bf00      	nop
 8003824:	20001f10 	.word	0x20001f10
 8003828:	20001e34 	.word	0x20001e34
 800382c:	20001e38 	.word	0x20001e38

08003830 <W5500_SetupTCPSocket>:
	}
}

void W5500_SetupTCPSocket(sTCPSocketBlock* socket, uint8_t socket_no, uint16_t port_no){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	4613      	mov	r3, r2
 800383e:	803b      	strh	r3, [r7, #0]
	// set socket_no
	socket->SocketNo = socket_no;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	701a      	strb	r2, [r3, #0]
	// set port number in W5500
	W5500_WriteWord(W5500_S_PORT0, BSB_SOCKET_REG(socket_no), port_no);
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015b      	lsls	r3, r3, #5
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	883a      	ldrh	r2, [r7, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	2004      	movs	r0, #4
 800385a:	f000 fc1a 	bl	8004092 <W5500_WriteWord>
	// and in socket struct
	socket->PortNo = port_no;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	883a      	ldrh	r2, [r7, #0]
 8003862:	805a      	strh	r2, [r3, #2]
	// set protocol - TCP
	W5500_WriteByte(W5500_S_MR, BSB_SOCKET_REG(socket_no), (0b00100000 | W5500_SOCKET_P_TCP));
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	015b      	lsls	r3, r3, #5
 8003868:	b25b      	sxtb	r3, r3
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	b25b      	sxtb	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2221      	movs	r2, #33	; 0x21
 8003874:	4619      	mov	r1, r3
 8003876:	2000      	movs	r0, #0
 8003878:	f000 fbf8 	bl	800406c <W5500_WriteByte>


}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <W5500_ProcessTCPSocket>:

void W5500_ProcessTCPSocket(uint8_t socket_no){
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
	// check if socket is open and listening or connected
	W5500CB.Sockets[socket_no].State = (eSocketState)W5500_ReadByte(W5500_S_SR, BSB_SOCKET_REG(socket_no));
 800388e:	79fc      	ldrb	r4, [r7, #7]
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	015b      	lsls	r3, r3, #5
 8003894:	b25b      	sxtb	r3, r3
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	b25b      	sxtb	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	2003      	movs	r0, #3
 80038a2:	f000 fb3f 	bl	8003f24 <W5500_ReadByte>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4619      	mov	r1, r3
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <W5500_ProcessTCPSocket+0xc0>)
 80038ac:	4623      	mov	r3, r4
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4423      	add	r3, r4
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	3308      	adds	r3, #8
 80038b8:	460a      	mov	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]
	switch(W5500CB.Sockets[socket_no].State){
 80038bc:	79fa      	ldrb	r2, [r7, #7]
 80038be:	4921      	ldr	r1, [pc, #132]	; (8003944 <W5500_ProcessTCPSocket+0xc0>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3308      	adds	r3, #8
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <W5500_ProcessTCPSocket+0x54>
 80038d2:	2b1c      	cmp	r3, #28
 80038d4:	d025      	beq.n	8003922 <W5500_ProcessTCPSocket+0x9e>
			//W5500_WriteRegisters(W5500_S_CR, BSB_SOCKET_REG(socket_no), 1, &tmp);
			W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_DISCON);
			break;
	}

}
 80038d6:	e031      	b.n	800393c <W5500_ProcessTCPSocket+0xb8>
			xStreamBufferReset(W5500CB.Sockets[socket_no].RXStreamHandle);
 80038d8:	79fa      	ldrb	r2, [r7, #7]
 80038da:	491a      	ldr	r1, [pc, #104]	; (8003944 <W5500_ProcessTCPSocket+0xc0>)
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	330c      	adds	r3, #12
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe f837 	bl	800195e <xStreamBufferReset>
			W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_OPEN);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	015b      	lsls	r3, r3, #5
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2201      	movs	r2, #1
 8003900:	4619      	mov	r1, r3
 8003902:	2001      	movs	r0, #1
 8003904:	f000 fbb2 	bl	800406c <W5500_WriteByte>
			W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_LISTEN);
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	015b      	lsls	r3, r3, #5
 800390c:	b25b      	sxtb	r3, r3
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	b25b      	sxtb	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2202      	movs	r2, #2
 8003918:	4619      	mov	r1, r3
 800391a:	2001      	movs	r0, #1
 800391c:	f000 fba6 	bl	800406c <W5500_WriteByte>
			break;
 8003920:	e00c      	b.n	800393c <W5500_ProcessTCPSocket+0xb8>
			W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_DISCON);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	015b      	lsls	r3, r3, #5
 8003926:	b25b      	sxtb	r3, r3
 8003928:	f043 0308 	orr.w	r3, r3, #8
 800392c:	b25b      	sxtb	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2208      	movs	r2, #8
 8003932:	4619      	mov	r1, r3
 8003934:	2001      	movs	r0, #1
 8003936:	f000 fb99 	bl	800406c <W5500_WriteByte>
			break;
 800393a:	bf00      	nop
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	20001e34 	.word	0x20001e34

08003948 <W5500_ReadoutTCPSocketToStream>:

void W5500_ReadoutTCPSocketToStream(uint8_t socket_no){
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
	if(W5500CB.Sockets[socket_no].State == SOCKET_ESTABLISHED){
 8003952:	79fa      	ldrb	r2, [r7, #7]
 8003954:	493e      	ldr	r1, [pc, #248]	; (8003a50 <W5500_ReadoutTCPSocketToStream+0x108>)
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3308      	adds	r3, #8
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b17      	cmp	r3, #23
 8003966:	d16f      	bne.n	8003a48 <W5500_ReadoutTCPSocketToStream+0x100>
		// check if any new data is to be read...
		uint16_t s_rx_rsr = W5500_ReadWord(W5500_S_RX_RSR0, BSB_SOCKET_REG(socket_no));
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	015b      	lsls	r3, r3, #5
 800396c:	b25b      	sxtb	r3, r3
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	b25b      	sxtb	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	2026      	movs	r0, #38	; 0x26
 800397a:	f000 fae9 	bl	8003f50 <W5500_ReadWord>
 800397e:	4603      	mov	r3, r0
 8003980:	82fb      	strh	r3, [r7, #22]
		while(s_rx_rsr>0){
 8003982:	e05e      	b.n	8003a42 <W5500_ReadoutTCPSocketToStream+0xfa>
			// there is smth to read
			// limit s_rx_rsr to MAX_RX_CHUNK - so no more bytes than that will be read
			s_rx_rsr = (s_rx_rsr>MAX_RX_CHUNK)?MAX_RX_CHUNK:s_rx_rsr;
 8003984:	8afb      	ldrh	r3, [r7, #22]
 8003986:	2b0a      	cmp	r3, #10
 8003988:	bf28      	it	cs
 800398a:	230a      	movcs	r3, #10
 800398c:	82fb      	strh	r3, [r7, #22]
			// s_rx_rsr becomes number of byte that we will actually read
			// read starting adress Sn_RX_RD
			uint16_t s_rx_rd = W5500_ReadWord(W5500_S_RX_RD0, BSB_SOCKET_REG(socket_no));
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	015b      	lsls	r3, r3, #5
 8003992:	b25b      	sxtb	r3, r3
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	b25b      	sxtb	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	2028      	movs	r0, #40	; 0x28
 80039a0:	f000 fad6 	bl	8003f50 <W5500_ReadWord>
 80039a4:	4603      	mov	r3, r0
 80039a6:	82bb      	strh	r3, [r7, #20]
			// prepare temporary storage for read data, no longer than MAX_RX_CHUNK
			uint8_t temp_storage[MAX_RX_CHUNK];
			memset(temp_storage, 0, MAX_RX_CHUNK);
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	220a      	movs	r2, #10
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fbec 	bl	800418e <memset>
			// do actual read
			W5500_ReadRegisters(s_rx_rd, BSB_SOCKET_RX(socket_no), s_rx_rsr, temp_storage);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	015b      	lsls	r3, r3, #5
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	f043 0318 	orr.w	r3, r3, #24
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	b2d9      	uxtb	r1, r3
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	8afa      	ldrh	r2, [r7, #22]
 80039ca:	8ab8      	ldrh	r0, [r7, #20]
 80039cc:	f000 fa1e 	bl	8003e0c <W5500_ReadRegisters>
			// increment Sn_RX_RD by the number of bytes read
			s_rx_rd += s_rx_rsr;
 80039d0:	8aba      	ldrh	r2, [r7, #20]
 80039d2:	8afb      	ldrh	r3, [r7, #22]
 80039d4:	4413      	add	r3, r2
 80039d6:	82bb      	strh	r3, [r7, #20]
			// and update it in device
			W5500_WriteWord(W5500_S_RX_RD0, BSB_SOCKET_REG(socket_no), s_rx_rd);
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	015b      	lsls	r3, r3, #5
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f043 0308 	orr.w	r3, r3, #8
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	8aba      	ldrh	r2, [r7, #20]
 80039e8:	4619      	mov	r1, r3
 80039ea:	2028      	movs	r0, #40	; 0x28
 80039ec:	f000 fb51 	bl	8004092 <W5500_WriteWord>
			// apply RECV command
			W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_RECV);
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	015b      	lsls	r3, r3, #5
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2240      	movs	r2, #64	; 0x40
 8003a00:	4619      	mov	r1, r3
 8003a02:	2001      	movs	r0, #1
 8003a04:	f000 fb32 	bl	800406c <W5500_WriteByte>
			// push temp_storage into byte stream
			xStreamBufferSend(W5500CB.Sockets[socket_no].RXStreamHandle, temp_storage, s_rx_rsr, portMAX_DELAY);
 8003a08:	79fa      	ldrb	r2, [r7, #7]
 8003a0a:	4911      	ldr	r1, [pc, #68]	; (8003a50 <W5500_ReadoutTCPSocketToStream+0x108>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	330c      	adds	r3, #12
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	8afa      	ldrh	r2, [r7, #22]
 8003a1c:	f107 0108 	add.w	r1, r7, #8
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	f7fe f801 	bl	8001a2a <xStreamBufferSend>
			// refresh s_rx_rsr
			s_rx_rsr = W5500_ReadWord(W5500_S_RX_RSR0, BSB_SOCKET_REG(socket_no));
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	015b      	lsls	r3, r3, #5
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f043 0308 	orr.w	r3, r3, #8
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	2026      	movs	r0, #38	; 0x26
 8003a3a:	f000 fa89 	bl	8003f50 <W5500_ReadWord>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	82fb      	strh	r3, [r7, #22]
		while(s_rx_rsr>0){
 8003a42:	8afb      	ldrh	r3, [r7, #22]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d19d      	bne.n	8003984 <W5500_ReadoutTCPSocketToStream+0x3c>
		}
	}
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20001e34 	.word	0x20001e34

08003a54 <W5500_ProcessControlMessages>:

void W5500_ProcessControlMessages(){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
	// check if any new messages
	if(uxQueueMessagesWaiting(W5500CB.ControlMessageQueue) > 0){
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <W5500_ProcessControlMessages+0x54>)
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fdc4 	bl	80015ec <uxQueueMessagesWaiting>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01a      	beq.n	8003aa0 <W5500_ProcessControlMessages+0x4c>
		sW5500ControlMessage newmessage;

		xQueueReceive(W5500CB.ControlMessageQueue, &newmessage, pdMS_TO_TICKS(100));
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <W5500_ProcessControlMessages+0x54>)
 8003a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6e:	4639      	mov	r1, r7
 8003a70:	220a      	movs	r2, #10
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fcde 	bl	8001434 <xQueueReceive>
		// check type of message

		switch(newmessage.MessageType){
 8003a78:	783b      	ldrb	r3, [r7, #0]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <W5500_ProcessControlMessages+0x2e>
 8003a7e:	2b02      	cmp	r3, #2
				// Important! Destroy allocated message data!
				free(newmessage.DataPointer);
				break;
			case W5500_MESSAGE_UPDATE_RX:
				; // because C
				break;
 8003a80:	e00e      	b.n	8003aa0 <W5500_ProcessControlMessages+0x4c>
				uint8_t target_socket = newmessage.SocketNo;
 8003a82:	793b      	ldrb	r3, [r7, #4]
 8003a84:	73fb      	strb	r3, [r7, #15]
				uint16_t frame_len = newmessage.MessageLength;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	81bb      	strh	r3, [r7, #12]
				W5500_WriteToSocket(target_socket, (uint8_t*)(newmessage.DataPointer), frame_len);
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	89ba      	ldrh	r2, [r7, #12]
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f80b 	bl	8003aac <W5500_WriteToSocket>
				free(newmessage.DataPointer);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fb65 	bl	8004168 <free>
				break;
 8003a9e:	bf00      	nop
		}

	}
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20001e34 	.word	0x20001e34

08003aac <W5500_WriteToSocket>:

void W5500_WriteToSocket(uint8_t socket_no, uint8_t *source, uint16_t length){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	71fb      	strb	r3, [r7, #7]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80bb      	strh	r3, [r7, #4]
	// only if socket is connected
	if(W5500CB.Sockets[socket_no].State == SOCKET_ESTABLISHED){
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	4921      	ldr	r1, [pc, #132]	; (8003b44 <W5500_WriteToSocket+0x98>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3308      	adds	r3, #8
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b17      	cmp	r3, #23
 8003ad0:	d134      	bne.n	8003b3c <W5500_WriteToSocket+0x90>
		// read Sn_TX_WR to know where to write
		uint16_t s_tx_wr = W5500_ReadWord(W5500_S_TX_WR0, BSB_SOCKET_REG(socket_no));
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	2024      	movs	r0, #36	; 0x24
 8003ae4:	f000 fa34 	bl	8003f50 <W5500_ReadWord>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	81fb      	strh	r3, [r7, #14]
		// do actual write
		W5500_WriteRegisters(s_tx_wr, BSB_SOCKET_TX(socket_no), length, source);
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	f043 0310 	orr.w	r3, r3, #16
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	b2d9      	uxtb	r1, r3
 8003afa:	88ba      	ldrh	r2, [r7, #4]
 8003afc:	89f8      	ldrh	r0, [r7, #14]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f000 fa48 	bl	8003f94 <W5500_WriteRegisters>
		// advance s_tx_wr
		s_tx_wr += length;
 8003b04:	89fa      	ldrh	r2, [r7, #14]
 8003b06:	88bb      	ldrh	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	81fb      	strh	r3, [r7, #14]
		W5500_WriteWord(W5500_S_TX_WR0, BSB_SOCKET_REG(socket_no), s_tx_wr);
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	015b      	lsls	r3, r3, #5
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	89fa      	ldrh	r2, [r7, #14]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	2024      	movs	r0, #36	; 0x24
 8003b20:	f000 fab7 	bl	8004092 <W5500_WriteWord>
		// apply SEND command
		W5500_WriteByte(W5500_S_CR, BSB_SOCKET_REG(socket_no), W5500_S_SEND);
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	f043 0308 	orr.w	r3, r3, #8
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2220      	movs	r2, #32
 8003b34:	4619      	mov	r1, r3
 8003b36:	2001      	movs	r0, #1
 8003b38:	f000 fa98 	bl	800406c <W5500_WriteByte>
	}
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20001e34 	.word	0x20001e34

08003b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b4e:	e003      	b.n	8003b58 <LoopCopyDataInit>

08003b50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003b52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b56:	3104      	adds	r1, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b58:	480b      	ldr	r0, [pc, #44]	; (8003b88 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003b5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b60:	d3f6      	bcc.n	8003b50 <CopyDataInit>
	ldr	r2, =_sbss
 8003b62:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003b64:	e002      	b.n	8003b6c <LoopFillZerobss>

08003b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b68:	f842 3b04 	str.w	r3, [r2], #4

08003b6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8003b6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b70:	d3f9      	bcc.n	8003b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b72:	f000 f825 	bl	8003bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b76:	f000 facb 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b7a:	f7ff fce7 	bl	800354c <main>
	bx	lr
 8003b7e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b80:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003b84:	08004394 	.word	0x08004394
	ldr	r0, =_sdata
 8003b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b8c:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8003b90:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8003b94:	20001f28 	.word	0x20001f28

08003b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b98:	e7fe      	b.n	8003b98 <ADC1_2_IRQHandler>

08003b9a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <HardFault_Handler+0x4>

08003ba0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <MemManage_Handler+0x4>

08003ba6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <BusFault_Handler+0x4>

08003bac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <UsageFault_Handler+0x4>

08003bb2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bc4:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <SystemInit+0x5c>)
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <SystemInit+0x5c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003bd0:	4912      	ldr	r1, [pc, #72]	; (8003c1c <SystemInit+0x5c>)
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <SystemInit+0x5c>)
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <SystemInit+0x60>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <SystemInit+0x5c>)
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <SystemInit+0x5c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003bec:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <SystemInit+0x5c>)
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <SystemInit+0x5c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <SystemInit+0x5c>)
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <SystemInit+0x5c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003c02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <SystemInit+0x5c>)
 8003c06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003c0a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003c0c:	f000 f878 	bl	8003d00 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <SystemInit+0x64>)
 8003c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c16:	609a      	str	r2, [r3, #8]
#endif 
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	f8ff0000 	.word	0xf8ff0000
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <SystemCoreClockUpdate+0xc4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d007      	beq.n	8003c5a <SystemCoreClockUpdate+0x32>
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d009      	beq.n	8003c62 <SystemCoreClockUpdate+0x3a>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d133      	bne.n	8003cba <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8003c52:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <SystemCoreClockUpdate+0xcc>)
 8003c56:	601a      	str	r2, [r3, #0]
      break;
 8003c58:	e033      	b.n	8003cc2 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <SystemCoreClockUpdate+0xcc>)
 8003c5e:	601a      	str	r2, [r3, #0]
      break;
 8003c60:	e02f      	b.n	8003cc2 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <SystemCoreClockUpdate+0xc4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c6a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <SystemCoreClockUpdate+0xc4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0c9b      	lsrs	r3, r3, #18
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <SystemCoreClockUpdate+0xd0>)
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003c8e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003c90:	e017      	b.n	8003cc2 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <SystemCoreClockUpdate+0xc4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <SystemCoreClockUpdate+0xd0>)
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003ca8:	6013      	str	r3, [r2, #0]
      break;
 8003caa:	e00a      	b.n	8003cc2 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <SystemCoreClockUpdate+0xcc>)
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003cb6:	6013      	str	r3, [r2, #0]
      break;
 8003cb8:	e003      	b.n	8003cc2 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <SystemCoreClockUpdate+0xcc>)
 8003cbe:	601a      	str	r2, [r3, #0]
      break;
 8003cc0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <SystemCoreClockUpdate+0xc4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <SystemCoreClockUpdate+0xd4>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <SystemCoreClockUpdate+0xc8>)
 8003ce0:	6013      	str	r3, [r2, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	20000018 	.word	0x20000018
 8003cf4:	007a1200 	.word	0x007a1200
 8003cf8:	003d0900 	.word	0x003d0900
 8003cfc:	2000001c 	.word	0x2000001c

08003d00 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003d04:	f000 f802 	bl	8003d0c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	2300      	movs	r3, #0
 8003d18:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003d1a:	4a3a      	ldr	r2, [pc, #232]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3301      	adds	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <SetSysClockTo72+0x38>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d42:	d1f0      	bne.n	8003d26 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003d50:	2301      	movs	r3, #1
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	e001      	b.n	8003d5a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003d56:	2300      	movs	r3, #0
 8003d58:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d14b      	bne.n	8003df8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f043 0310 	orr.w	r3, r3, #16
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003d6c:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d7a:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <SetSysClockTo72+0xfc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003daa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003dac:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003db6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003db8:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003dc4:	bf00      	nop
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f9      	beq.n	8003dc6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 0303 	bic.w	r3, r3, #3
 8003ddc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f043 0302 	orr.w	r3, r3, #2
 8003de8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003dea:	bf00      	nop
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <SetSysClockTo72+0xf8>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d1f9      	bne.n	8003dec <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40022000 	.word	0x40022000

08003e0c <W5500_ReadRegisters>:

#include "w5500_spi.h"
#include "FreeRTOS.h"
#include "task.h"

void W5500_ReadRegisters(uint16_t reg_offset, uint8_t block_no, uint16_t reg_count, uint8_t *dest){
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	4603      	mov	r3, r0
 8003e16:	81fb      	strh	r3, [r7, #14]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	737b      	strb	r3, [r7, #13]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	817b      	strh	r3, [r7, #10]
	// prepare header
	tDataFrameHeader header;
	header.AddressPhase = reg_offset;
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	833b      	strh	r3, [r7, #24]
	header.BSB = block_no;
 8003e24:	7b7b      	ldrb	r3, [r7, #13]
 8003e26:	76bb      	strb	r3, [r7, #26]
	header.OpMode = OPMODE_VDL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	773b      	strb	r3, [r7, #28]
	header.RWMode = READMODE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
	uint8_t header_buff[3];
	W5500_SerializeHeader(header, header_buff);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	461a      	mov	r2, r3
 8003e36:	f107 0318 	add.w	r3, r7, #24
 8003e3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e3e:	f000 f944 	bl	80040ca <W5500_SerializeHeader>

	// TODO - take semaphore
	//...

	// Select the chip
	W5500_SELECT;
 8003e42:	2101      	movs	r1, #1
 8003e44:	4835      	ldr	r0, [pc, #212]	; (8003f1c <W5500_ReadRegisters+0x110>)
 8003e46:	f7fc fa97 	bl	8000378 <GPIO_ResetBits>
	//vTaskDelay(pdMS_TO_TICKS(10));

	// if there is something remaining in RX buffer, clear it
	if(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == SET){
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4834      	ldr	r0, [pc, #208]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e4e:	f7fc fcc7 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d102      	bne.n	8003e5e <W5500_ReadRegisters+0x52>
		SPI_I2S_ReceiveData(SPI1);
 8003e58:	4831      	ldr	r0, [pc, #196]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e5a:	f7fc fcb5 	bl	80007c8 <SPI_I2S_ReceiveData>
	}

	// transmit header
	for(uint8_t i=0; i<3; i++){
 8003e5e:	2300      	movs	r3, #0
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e020      	b.n	8003ea6 <W5500_ReadRegisters+0x9a>
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET){}
 8003e64:	bf00      	nop
 8003e66:	2102      	movs	r1, #2
 8003e68:	482d      	ldr	r0, [pc, #180]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e6a:	f7fc fcb9 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f8      	beq.n	8003e66 <W5500_ReadRegisters+0x5a>
		SPI_I2S_SendData(SPI1, header_buff[i]);
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
 8003e76:	f107 0220 	add.w	r2, r7, #32
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	4826      	ldr	r0, [pc, #152]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e86:	f7fc fc91 	bl	80007ac <SPI_I2S_SendData>
		// still need to read just to clear RX buffer...
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET){}
 8003e8a:	bf00      	nop
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4824      	ldr	r0, [pc, #144]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e90:	f7fc fca6 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f8      	beq.n	8003e8c <W5500_ReadRegisters+0x80>
		SPI_I2S_ReceiveData(SPI1);
 8003e9a:	4821      	ldr	r0, [pc, #132]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003e9c:	f7fc fc94 	bl	80007c8 <SPI_I2S_ReceiveData>
	for(uint8_t i=0; i<3; i++){
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d9db      	bls.n	8003e64 <W5500_ReadRegisters+0x58>
	}
	// in loop for each byte to read:
	for(uint8_t i=0; i<reg_count; i++){
 8003eac:	2300      	movs	r3, #0
 8003eae:	77bb      	strb	r3, [r7, #30]
 8003eb0:	e01f      	b.n	8003ef2 <W5500_ReadRegisters+0xe6>
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET){}
 8003eb2:	bf00      	nop
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	481a      	ldr	r0, [pc, #104]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003eb8:	f7fc fc92 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f8      	beq.n	8003eb4 <W5500_ReadRegisters+0xa8>
		// transmit 0x00 just to roll the clock
		SPI_I2S_SendData(SPI1, 0x00);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003ec6:	f7fc fc71 	bl	80007ac <SPI_I2S_SendData>
		// wait for new received data
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET){}
 8003eca:	bf00      	nop
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4814      	ldr	r0, [pc, #80]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003ed0:	f7fc fc86 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f8      	beq.n	8003ecc <W5500_ReadRegisters+0xc0>
		// read it to "dest"
		dest[i] = SPI_I2S_ReceiveData(SPI1);
 8003eda:	7fbb      	ldrb	r3, [r7, #30]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	18d4      	adds	r4, r2, r3
 8003ee0:	480f      	ldr	r0, [pc, #60]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003ee2:	f7fc fc71 	bl	80007c8 <SPI_I2S_ReceiveData>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	7023      	strb	r3, [r4, #0]
	for(uint8_t i=0; i<reg_count; i++){
 8003eec:	7fbb      	ldrb	r3, [r7, #30]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	77bb      	strb	r3, [r7, #30]
 8003ef2:	7fbb      	ldrb	r3, [r7, #30]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	897a      	ldrh	r2, [r7, #10]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d8da      	bhi.n	8003eb2 <W5500_ReadRegisters+0xa6>
	}

	// wait till tx'ing is done
	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET){}
 8003efc:	bf00      	nop
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	4807      	ldr	r0, [pc, #28]	; (8003f20 <W5500_ReadRegisters+0x114>)
 8003f02:	f7fc fc6d 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d0f8      	beq.n	8003efe <W5500_ReadRegisters+0xf2>

	// Deselect the chip
	W5500_DESELECT;
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4803      	ldr	r0, [pc, #12]	; (8003f1c <W5500_ReadRegisters+0x110>)
 8003f10:	f7fc fa24 	bl	800035c <GPIO_SetBits>

	// TODO - release semaphore
	//...
}
 8003f14:	bf00      	nop
 8003f16:	3724      	adds	r7, #36	; 0x24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd90      	pop	{r4, r7, pc}
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40013000 	.word	0x40013000

08003f24 <W5500_ReadByte>:

uint8_t W5500_ReadByte(uint16_t reg_offset, uint8_t block_no){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	80fb      	strh	r3, [r7, #6]
 8003f30:	4613      	mov	r3, r2
 8003f32:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
	W5500_ReadRegisters(reg_offset, block_no, 1, &result);
 8003f38:	f107 030f 	add.w	r3, r7, #15
 8003f3c:	7979      	ldrb	r1, [r7, #5]
 8003f3e:	88f8      	ldrh	r0, [r7, #6]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f7ff ff63 	bl	8003e0c <W5500_ReadRegisters>
	return result;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <W5500_ReadWord>:

uint16_t W5500_ReadWord(uint16_t reg_offset, uint8_t block_no){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	460a      	mov	r2, r1
 8003f5a:	80fb      	strh	r3, [r7, #6]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	717b      	strb	r3, [r7, #5]
	uint16_t result = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp[] = {0,0};
 8003f64:	2300      	movs	r3, #0
 8003f66:	733b      	strb	r3, [r7, #12]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	737b      	strb	r3, [r7, #13]
	W5500_ReadRegisters(reg_offset, block_no, 2, &tmp);
 8003f6c:	f107 030c 	add.w	r3, r7, #12
 8003f70:	7979      	ldrb	r1, [r7, #5]
 8003f72:	88f8      	ldrh	r0, [r7, #6]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f7ff ff49 	bl	8003e0c <W5500_ReadRegisters>
	result = tmp[0]<<8 | tmp[1];
 8003f7a:	7b3b      	ldrb	r3, [r7, #12]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	7b7b      	ldrb	r3, [r7, #13]
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	81fb      	strh	r3, [r7, #14]
	return result;
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <W5500_WriteRegisters>:

void W5500_WriteRegisters(uint16_t reg_offset, uint8_t block_no, uint16_t reg_count, uint8_t *source){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	81fb      	strh	r3, [r7, #14]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	737b      	strb	r3, [r7, #13]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	817b      	strh	r3, [r7, #10]
	// prepare header
	tDataFrameHeader header;
	header.AddressPhase = reg_offset;
 8003fa8:	89fb      	ldrh	r3, [r7, #14]
 8003faa:	833b      	strh	r3, [r7, #24]
	header.BSB = block_no;
 8003fac:	7b7b      	ldrb	r3, [r7, #13]
 8003fae:	76bb      	strb	r3, [r7, #26]
	header.OpMode = OPMODE_VDL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	773b      	strb	r3, [r7, #28]
	header.RWMode = WRITEMODE;
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	76fb      	strb	r3, [r7, #27]
	uint8_t header_buff[3];
	W5500_SerializeHeader(header, header_buff);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f107 0318 	add.w	r3, r7, #24
 8003fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fc6:	f000 f880 	bl	80040ca <W5500_SerializeHeader>

	// TODO - take semaphore
	//...

	// Select the chip
	W5500_SELECT;
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4825      	ldr	r0, [pc, #148]	; (8004064 <W5500_WriteRegisters+0xd0>)
 8003fce:	f7fc f9d3 	bl	8000378 <GPIO_ResetBits>
	//vTaskDelay(pdMS_TO_TICKS(10));

	// transmit header
	for(uint8_t i=0; i<3; i++){
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e015      	b.n	8004004 <W5500_WriteRegisters+0x70>
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET){}
 8003fd8:	bf00      	nop
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4822      	ldr	r0, [pc, #136]	; (8004068 <W5500_WriteRegisters+0xd4>)
 8003fde:	f7fc fbff 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f8      	beq.n	8003fda <W5500_WriteRegisters+0x46>
		SPI_I2S_SendData(SPI1, header_buff[i]);
 8003fe8:	7ffb      	ldrb	r3, [r7, #31]
 8003fea:	f107 0220 	add.w	r2, r7, #32
 8003fee:	4413      	add	r3, r2
 8003ff0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	481b      	ldr	r0, [pc, #108]	; (8004068 <W5500_WriteRegisters+0xd4>)
 8003ffa:	f7fc fbd7 	bl	80007ac <SPI_I2S_SendData>
	for(uint8_t i=0; i<3; i++){
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	3301      	adds	r3, #1
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d9e6      	bls.n	8003fd8 <W5500_WriteRegisters+0x44>
	}

	// in loop for each byte to write:
	for(uint8_t i=0; i<reg_count; i++){
 800400a:	2300      	movs	r3, #0
 800400c:	77bb      	strb	r3, [r7, #30]
 800400e:	e013      	b.n	8004038 <W5500_WriteRegisters+0xa4>
		while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET){}
 8004010:	bf00      	nop
 8004012:	2102      	movs	r1, #2
 8004014:	4814      	ldr	r0, [pc, #80]	; (8004068 <W5500_WriteRegisters+0xd4>)
 8004016:	f7fc fbe3 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f8      	beq.n	8004012 <W5500_WriteRegisters+0x7e>
		// transmit data
		SPI_I2S_SendData(SPI1, source[i]);
 8004020:	7fbb      	ldrb	r3, [r7, #30]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	480e      	ldr	r0, [pc, #56]	; (8004068 <W5500_WriteRegisters+0xd4>)
 800402e:	f7fc fbbd 	bl	80007ac <SPI_I2S_SendData>
	for(uint8_t i=0; i<reg_count; i++){
 8004032:	7fbb      	ldrb	r3, [r7, #30]
 8004034:	3301      	adds	r3, #1
 8004036:	77bb      	strb	r3, [r7, #30]
 8004038:	7fbb      	ldrb	r3, [r7, #30]
 800403a:	b29b      	uxth	r3, r3
 800403c:	897a      	ldrh	r2, [r7, #10]
 800403e:	429a      	cmp	r2, r3
 8004040:	d8e6      	bhi.n	8004010 <W5500_WriteRegisters+0x7c>
	}

	// wait till tx'ing is done
	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET){}
 8004042:	bf00      	nop
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	4808      	ldr	r0, [pc, #32]	; (8004068 <W5500_WriteRegisters+0xd4>)
 8004048:	f7fc fbca 	bl	80007e0 <SPI_I2S_GetFlagStatus>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d0f8      	beq.n	8004044 <W5500_WriteRegisters+0xb0>

	// Deselect the chip
	W5500_DESELECT;
 8004052:	2101      	movs	r1, #1
 8004054:	4803      	ldr	r0, [pc, #12]	; (8004064 <W5500_WriteRegisters+0xd0>)
 8004056:	f7fc f981 	bl	800035c <GPIO_SetBits>

	// TODO - release semaphore
	//...
}
 800405a:	bf00      	nop
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40011000 	.word	0x40011000
 8004068:	40013000 	.word	0x40013000

0800406c <W5500_WriteByte>:

void W5500_WriteByte(uint16_t reg_offset, uint8_t block_no, uint8_t value){
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	80fb      	strh	r3, [r7, #6]
 8004076:	460b      	mov	r3, r1
 8004078:	717b      	strb	r3, [r7, #5]
 800407a:	4613      	mov	r3, r2
 800407c:	713b      	strb	r3, [r7, #4]
	W5500_WriteRegisters(reg_offset, block_no, 1, &value);
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	7979      	ldrb	r1, [r7, #5]
 8004082:	88f8      	ldrh	r0, [r7, #6]
 8004084:	2201      	movs	r2, #1
 8004086:	f7ff ff85 	bl	8003f94 <W5500_WriteRegisters>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <W5500_WriteWord>:

void W5500_WriteWord(uint16_t reg_offset, uint8_t block_no, uint16_t value){
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	80fb      	strh	r3, [r7, #6]
 800409c:	460b      	mov	r3, r1
 800409e:	717b      	strb	r3, [r7, #5]
 80040a0:	4613      	mov	r3, r2
 80040a2:	807b      	strh	r3, [r7, #2]
	uint8_t tmp[] = {value>>8, value&0x00ff};
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	733b      	strb	r3, [r7, #12]
 80040ae:	887b      	ldrh	r3, [r7, #2]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	737b      	strb	r3, [r7, #13]
	W5500_WriteRegisters(reg_offset, block_no, 2, tmp);
 80040b4:	f107 030c 	add.w	r3, r7, #12
 80040b8:	7979      	ldrb	r1, [r7, #5]
 80040ba:	88f8      	ldrh	r0, [r7, #6]
 80040bc:	2202      	movs	r2, #2
 80040be:	f7ff ff69 	bl	8003f94 <W5500_WriteRegisters>
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <W5500_SerializeHeader>:

void W5500_SerializeHeader(tDataFrameHeader header, uint8_t *dest){
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	f107 0308 	add.w	r3, r7, #8
 80040d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80040d8:	607a      	str	r2, [r7, #4]
	dest[0] = (uint8_t)(header.AddressPhase>>8);
 80040da:	893b      	ldrh	r3, [r7, #8]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	701a      	strb	r2, [r3, #0]
	dest[1] = (uint8_t)(header.AddressPhase&0xFF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	893a      	ldrh	r2, [r7, #8]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
	dest[2] = (uint8_t)(header.BSB | header.RWMode | header.OpMode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3302      	adds	r3, #2
 80040f4:	7ab9      	ldrb	r1, [r7, #10]
 80040f6:	7afa      	ldrb	r2, [r7, #11]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	b2d1      	uxtb	r1, r2
 80040fc:	7b3a      	ldrb	r2, [r7, #12]
 80040fe:	430a      	orrs	r2, r1
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
	...

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2500      	movs	r5, #0
 8004114:	4e0c      	ldr	r6, [pc, #48]	; (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004118:	1ba4      	subs	r4, r4, r6
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a5      	cmp	r5, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	f000 f908 	bl	8004334 <_init>
 8004124:	2500      	movs	r5, #0
 8004126:	4e0a      	ldr	r6, [pc, #40]	; (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <__libc_init_array+0x44>)
 800412a:	1ba4      	subs	r4, r4, r6
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a5      	cmp	r5, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004138:	4798      	blx	r3
 800413a:	3501      	adds	r5, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004142:	4798      	blx	r3
 8004144:	3501      	adds	r5, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	0800438c 	.word	0x0800438c
 800414c:	0800438c 	.word	0x0800438c
 8004150:	0800438c 	.word	0x0800438c
 8004154:	08004390 	.word	0x08004390

08004158 <malloc>:
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <malloc+0xc>)
 800415a:	4601      	mov	r1, r0
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	f000 b86b 	b.w	8004238 <_malloc_r>
 8004162:	bf00      	nop
 8004164:	2000002c 	.word	0x2000002c

08004168 <free>:
 8004168:	4b02      	ldr	r3, [pc, #8]	; (8004174 <free+0xc>)
 800416a:	4601      	mov	r1, r0
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f000 b817 	b.w	80041a0 <_free_r>
 8004172:	bf00      	nop
 8004174:	2000002c 	.word	0x2000002c

08004178 <memcpy>:
 8004178:	b510      	push	{r4, lr}
 800417a:	1e43      	subs	r3, r0, #1
 800417c:	440a      	add	r2, r1
 800417e:	4291      	cmp	r1, r2
 8004180:	d100      	bne.n	8004184 <memcpy+0xc>
 8004182:	bd10      	pop	{r4, pc}
 8004184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418c:	e7f7      	b.n	800417e <memcpy+0x6>

0800418e <memset>:
 800418e:	4603      	mov	r3, r0
 8004190:	4402      	add	r2, r0
 8004192:	4293      	cmp	r3, r2
 8004194:	d100      	bne.n	8004198 <memset+0xa>
 8004196:	4770      	bx	lr
 8004198:	f803 1b01 	strb.w	r1, [r3], #1
 800419c:	e7f9      	b.n	8004192 <memset+0x4>
	...

080041a0 <_free_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4605      	mov	r5, r0
 80041a4:	2900      	cmp	r1, #0
 80041a6:	d043      	beq.n	8004230 <_free_r+0x90>
 80041a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ac:	1f0c      	subs	r4, r1, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bfb8      	it	lt
 80041b2:	18e4      	addlt	r4, r4, r3
 80041b4:	f000 f8ae 	bl	8004314 <__malloc_lock>
 80041b8:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <_free_r+0x94>)
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	4610      	mov	r0, r2
 80041be:	b933      	cbnz	r3, 80041ce <_free_r+0x2e>
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6014      	str	r4, [r2, #0]
 80041c4:	4628      	mov	r0, r5
 80041c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ca:	f000 b8a4 	b.w	8004316 <__malloc_unlock>
 80041ce:	42a3      	cmp	r3, r4
 80041d0:	d90b      	bls.n	80041ea <_free_r+0x4a>
 80041d2:	6821      	ldr	r1, [r4, #0]
 80041d4:	1862      	adds	r2, r4, r1
 80041d6:	4293      	cmp	r3, r2
 80041d8:	bf01      	itttt	eq
 80041da:	681a      	ldreq	r2, [r3, #0]
 80041dc:	685b      	ldreq	r3, [r3, #4]
 80041de:	1852      	addeq	r2, r2, r1
 80041e0:	6022      	streq	r2, [r4, #0]
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	6004      	str	r4, [r0, #0]
 80041e6:	e7ed      	b.n	80041c4 <_free_r+0x24>
 80041e8:	4613      	mov	r3, r2
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	b10a      	cbz	r2, 80041f2 <_free_r+0x52>
 80041ee:	42a2      	cmp	r2, r4
 80041f0:	d9fa      	bls.n	80041e8 <_free_r+0x48>
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	1858      	adds	r0, r3, r1
 80041f6:	42a0      	cmp	r0, r4
 80041f8:	d10b      	bne.n	8004212 <_free_r+0x72>
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	4401      	add	r1, r0
 80041fe:	1858      	adds	r0, r3, r1
 8004200:	4282      	cmp	r2, r0
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	d1de      	bne.n	80041c4 <_free_r+0x24>
 8004206:	6810      	ldr	r0, [r2, #0]
 8004208:	6852      	ldr	r2, [r2, #4]
 800420a:	4401      	add	r1, r0
 800420c:	6019      	str	r1, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	e7d8      	b.n	80041c4 <_free_r+0x24>
 8004212:	d902      	bls.n	800421a <_free_r+0x7a>
 8004214:	230c      	movs	r3, #12
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	e7d4      	b.n	80041c4 <_free_r+0x24>
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	1821      	adds	r1, r4, r0
 800421e:	428a      	cmp	r2, r1
 8004220:	bf01      	itttt	eq
 8004222:	6811      	ldreq	r1, [r2, #0]
 8004224:	6852      	ldreq	r2, [r2, #4]
 8004226:	1809      	addeq	r1, r1, r0
 8004228:	6021      	streq	r1, [r4, #0]
 800422a:	6062      	str	r2, [r4, #4]
 800422c:	605c      	str	r4, [r3, #4]
 800422e:	e7c9      	b.n	80041c4 <_free_r+0x24>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	20001e08 	.word	0x20001e08

08004238 <_malloc_r>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	1ccd      	adds	r5, r1, #3
 800423c:	f025 0503 	bic.w	r5, r5, #3
 8004240:	3508      	adds	r5, #8
 8004242:	2d0c      	cmp	r5, #12
 8004244:	bf38      	it	cc
 8004246:	250c      	movcc	r5, #12
 8004248:	2d00      	cmp	r5, #0
 800424a:	4606      	mov	r6, r0
 800424c:	db01      	blt.n	8004252 <_malloc_r+0x1a>
 800424e:	42a9      	cmp	r1, r5
 8004250:	d903      	bls.n	800425a <_malloc_r+0x22>
 8004252:	230c      	movs	r3, #12
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	2000      	movs	r0, #0
 8004258:	bd70      	pop	{r4, r5, r6, pc}
 800425a:	f000 f85b 	bl	8004314 <__malloc_lock>
 800425e:	4a23      	ldr	r2, [pc, #140]	; (80042ec <_malloc_r+0xb4>)
 8004260:	6814      	ldr	r4, [r2, #0]
 8004262:	4621      	mov	r1, r4
 8004264:	b991      	cbnz	r1, 800428c <_malloc_r+0x54>
 8004266:	4c22      	ldr	r4, [pc, #136]	; (80042f0 <_malloc_r+0xb8>)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	b91b      	cbnz	r3, 8004274 <_malloc_r+0x3c>
 800426c:	4630      	mov	r0, r6
 800426e:	f000 f841 	bl	80042f4 <_sbrk_r>
 8004272:	6020      	str	r0, [r4, #0]
 8004274:	4629      	mov	r1, r5
 8004276:	4630      	mov	r0, r6
 8004278:	f000 f83c 	bl	80042f4 <_sbrk_r>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d126      	bne.n	80042ce <_malloc_r+0x96>
 8004280:	230c      	movs	r3, #12
 8004282:	4630      	mov	r0, r6
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	f000 f846 	bl	8004316 <__malloc_unlock>
 800428a:	e7e4      	b.n	8004256 <_malloc_r+0x1e>
 800428c:	680b      	ldr	r3, [r1, #0]
 800428e:	1b5b      	subs	r3, r3, r5
 8004290:	d41a      	bmi.n	80042c8 <_malloc_r+0x90>
 8004292:	2b0b      	cmp	r3, #11
 8004294:	d90f      	bls.n	80042b6 <_malloc_r+0x7e>
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	18cc      	adds	r4, r1, r3
 800429a:	50cd      	str	r5, [r1, r3]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f83a 	bl	8004316 <__malloc_unlock>
 80042a2:	f104 000b 	add.w	r0, r4, #11
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	f020 0007 	bic.w	r0, r0, #7
 80042ac:	1ac3      	subs	r3, r0, r3
 80042ae:	d01b      	beq.n	80042e8 <_malloc_r+0xb0>
 80042b0:	425a      	negs	r2, r3
 80042b2:	50e2      	str	r2, [r4, r3]
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
 80042b6:	428c      	cmp	r4, r1
 80042b8:	bf0b      	itete	eq
 80042ba:	6863      	ldreq	r3, [r4, #4]
 80042bc:	684b      	ldrne	r3, [r1, #4]
 80042be:	6013      	streq	r3, [r2, #0]
 80042c0:	6063      	strne	r3, [r4, #4]
 80042c2:	bf18      	it	ne
 80042c4:	460c      	movne	r4, r1
 80042c6:	e7e9      	b.n	800429c <_malloc_r+0x64>
 80042c8:	460c      	mov	r4, r1
 80042ca:	6849      	ldr	r1, [r1, #4]
 80042cc:	e7ca      	b.n	8004264 <_malloc_r+0x2c>
 80042ce:	1cc4      	adds	r4, r0, #3
 80042d0:	f024 0403 	bic.w	r4, r4, #3
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d005      	beq.n	80042e4 <_malloc_r+0xac>
 80042d8:	1a21      	subs	r1, r4, r0
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 f80a 	bl	80042f4 <_sbrk_r>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d0cd      	beq.n	8004280 <_malloc_r+0x48>
 80042e4:	6025      	str	r5, [r4, #0]
 80042e6:	e7d9      	b.n	800429c <_malloc_r+0x64>
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	bf00      	nop
 80042ec:	20001e08 	.word	0x20001e08
 80042f0:	20001e0c 	.word	0x20001e0c

080042f4 <_sbrk_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	2300      	movs	r3, #0
 80042f8:	4c05      	ldr	r4, [pc, #20]	; (8004310 <_sbrk_r+0x1c>)
 80042fa:	4605      	mov	r5, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	f000 f80a 	bl	8004318 <_sbrk>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_sbrk_r+0x1a>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	b103      	cbz	r3, 800430e <_sbrk_r+0x1a>
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	20001f24 	.word	0x20001f24

08004314 <__malloc_lock>:
 8004314:	4770      	bx	lr

08004316 <__malloc_unlock>:
 8004316:	4770      	bx	lr

08004318 <_sbrk>:
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <_sbrk+0x14>)
 800431a:	4602      	mov	r2, r0
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	b909      	cbnz	r1, 8004324 <_sbrk+0xc>
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <_sbrk+0x18>)
 8004322:	6019      	str	r1, [r3, #0]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	4402      	add	r2, r0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	4770      	bx	lr
 800432c:	20001e10 	.word	0x20001e10
 8004330:	20001f28 	.word	0x20001f28

08004334 <_init>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr

08004340 <_fini>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr
